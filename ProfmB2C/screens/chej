//  signup 13-2-24---
import * as React from "react";
import { StyleSheet, View, Image, Pressable, Text, ScrollView ,Dimensions, TextInput} from "react-native";
import { useNavigation } from "@react-navigation/native";
import Property1Default from "../components/Property1Default";
import FormContainer from "../components/FormContainer";
import PasswordSection from "../components/PasswordSection";
import ConfirmPasswordForm from "../components/ConfirmPasswordForm";
import { Color, Border, FontSize, FontFamily } from "../GlobalStyles";

const SignUp = () => {
  const navigation = useNavigation();
  const windowHeight = Dimensions.get('window').height;
  

  return (
    <ScrollView>
    <View style={[{height:windowHeight+100,backgroundColor: Color.colorGray_100,
    flex: 1,}, styles.iconLayout]}>
      <View style={styles.rectangleParent}>
        <View style={[styles.groupChild, styles.groupShadowBox]} />
        <View style={[styles.rectangleGroup, styles.groupLayout]}>
          <View style={[styles.groupItem, styles.groupLayout]} />
          <Image
            style={[styles.profmLogo1111, styles.profmLogo1111Position]}
            resizeMode="cover"
            source={require("../assets/profm-logo1-1-1-11.png")}
          />
        </View>
        <Pressable style={styles.arrow21} onPress={() => navigation.goBack()}>
          <Image
            style={[styles.icon, styles.iconLayout]}
            resizeMode="cover"
            source={require("../assets/arrow-2-11.png")}
          />
        </Pressable>
        <Text style={styles.signUp1}>Sign up</Text>
      </View>
      
      <Property1Default
        logIn="sign up"
        property1DefaultPosition="absolute"
        property1DefaultMarginLeft={"2%"}
        property1DefaultTop={"77%"}
        property1DefaultLeft="0%"
        property1DefaultWidth={"95%"}
        property1DefaultHeight={48}
        property1DefaultRight="unset"
        property1DefaultBottom="unset"
        logInLetterSpacing={0.6}
        logInLineHeight={26}
        logInTextTransform="capitalize"
        logInWidth="58.31%"
        logInLeft="20.7%"
        onButtonBigPress={() => navigation.navigate("LogIn")}
      />
      <View style={styles.frameParent}>
        <View style={styles.frameGroup}>
          {/* <FormContainer fullName="First name" personName="Assem" />
          <FormContainer
            fullName="Last name"
            personName="Emara"
            propWidth={"30%"}
            propMarginLeft={"30%"}
          /> */}
          <View style={styles.mobileParent}>
          <Text style={styles.mobile}>{`First name `}</Text>
          <View style={styles.rectangleContainer}>
            <View style={styles.frameShadowBoxName} />
            <View
              style={[styles.vuesaxoutlinecallParent, styles.parentPosition]}
            >
              <Image
                style={styles.vuesaxoutlinecallIcon}
                resizeMode="cover"
                source={require("../assets/profile.png")}
              />
              <TextInput/>
              <Text style={styles.text}>+966 500891756</Text>
            </View>
          </View>
        </View>
        <View style={styles.mobileParent}>
          <Text style={styles.mobile}>{`Last name `}</Text>
          <View style={styles.rectangleContainer}>
            <View style={styles.frameShadowBoxName} />
            <View
              style={[styles.vuesaxoutlinecallParent, styles.parentPosition]}
            >
              <Image
                style={styles.vuesaxoutlinecallIcon}
                resizeMode="cover"
                source={require("../assets/profile.png")}
              />
              <Text style={styles.text}>+966 500891756</Text>
            </View>
          </View>
        </View>
        </View>
        <View style={styles.mobileParent}>
          <Text style={styles.mobile}>{`Mobile `}</Text>
          <View style={styles.rectangleContainer}>
            <View style={styles.frameShadowBox} />
            <View
              style={[styles.vuesaxoutlinecallParent, styles.parentPosition]}
            >
              <Image
                style={styles.vuesaxoutlinecallIcon}
                resizeMode="cover"
                source={require("../assets/vuesaxoutlinecall1.png")}
              />
              <Text style={styles.text}>+966 500891756</Text>
            </View>
          </View>
        </View>
        {/*mail */}
        <View style={styles.mobileParent}>
       
          <Text style={styles.mobile}>Email</Text>
          <View style={styles.rectangleContainer}>
            <View style={styles.frameShadowBox} />
            <View style={[styles.smsParent, styles.parentPosition]}>
              <Image
                style={styles.smsIcon}
                resizeMode="cover"
                source={require("../assets/sms.png")}
              />
               <TextInput style={styles.mobile}/>
              <Text style={styles.text}>Logicsystems@gmail.com</Text>
            </View>
          </View>
        </View>
        
        <PasswordSection />
        <ConfirmPasswordForm />
        
      </View>
      <View style={[styles.frameContainer, styles.profmLogo1111Position]}>
        <View style={styles.lineParent}>
          <View style={[styles.frameInner, styles.lineViewBorder]} />
          <Text style={styles.orSignUp}>or sign up with</Text>
          <View style={[styles.lineView, styles.lineViewBorder]} />
        </View>
        <View style={styles.groupParent}>
          <Image
            style={styles.groupIconLayout}
            resizeMode="cover"
            source={require("../assets/group-2386551.png")}
          />
          <Image
            style={[styles.frameChild1, styles.groupIconLayout]}
            resizeMode="cover"
            source={require("../assets/group-2386541.png")}
          />
          <Image
            style={[styles.frameChild1, styles.groupIconLayout]}
            resizeMode="cover"
            source={require("../assets/group-2386561.png")}
          />
        </View>
      </View>
      
    </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  iconLayout: {
    overflow: "hidden",
    width: "100%",
  },
  groupShadowBox: {
    shadowOpacity: 1,
    shadowOffset: {
      width: 0,
      height: 4,
    },
    top: 0,
  },
  groupLayout: {
    height: 48,
    width: 160,
    left: "50%",
    position: "absolute",
  },
  profmLogo1111Position: {
    left: "50%",
    position: "absolute",
  },
  parentPosition: {
    zIndex: 1,
    top: 14,
    justifyContent: "center",
    height: 20,
    alignItems: "center",
    flexDirection: "row",
    position: "absolute",
  },
  lineViewBorder: {
    opacity: 0.7,
    height: 1,
    borderTopWidth: 0.5,
    borderColor: Color.a6A6A6,
    borderStyle: "solid",
  },
  groupIconLayout: {
    height: 60,
    width: 60,
  },
  groupChild: {
    borderBottomRightRadius: Border.br_3xs,
    borderBottomLeftRadius: Border.br_3xs,
    height: 99,
    elevation: 20,
    shadowRadius: 20,
    shadowColor: "rgba(0, 0, 0, 0.2)",
    backgroundColor: Color.whait,
    shadowOpacity: 1,
    shadowOffset: {
      width: 0,
      height: 4,
    },
    width: "100%",
    left: 0,
    position: "absolute",
  },
  groupItem: {
    marginLeft: "-60%",
    borderRadius: Border.br_mini,
    backgroundColor: Color.colorAliceblue_100,
    shadowColor: "rgba(0, 0, 0, 0.08)",
    shadowRadius: 10,
    elevation: 10,
    shadowOpacity: 1,
    shadowOffset: {
      width: 0,
      height: 4,
    },
    top: 0,
    width: 160,
  },
  profmLogo1111: {
    marginLeft: -50,
    top: "10%",
    width: 100,
    height: 36,
  },
  rectangleGroup: {
    marginLeft: "-15%",
    top: "60%",
  },
  icon: {
    height: "100%",
  },
  arrow21: {
    top: "40%",
    width: 24,
    height: 24,
    left: "5%",
    position: "absolute",
  },
  signUp1: {
    marginLeft: -27.5,
    top: "27%",
    fontSize: FontSize.size_base,
    fontWeight: "700",
    textAlign: "center",
    color: Color.praimary,
    fontFamily: FontFamily.dGBaysan,
    lineHeight: 30,
    left: "50%",
    position: "absolute",
  },
  rectangleParent: {
    height: 124,
    width: "100%",
    left: 0,
    top: 0,
    position: "absolute",
  },
  frameGroup: {
    flexDirection: "row",
  },
  mobile: {
    fontWeight: "600",
    color: Color.grayBlack,
    textAlign: "left",
    width: 83,
    alignItems: "center",
    display: "flex",
    fontSize: FontSize.med_size,
    fontFamily: FontFamily.dGBaysan,
    lineHeight: 30,
    height: 24,
    left:"5%"
  },
  mobile: {
    fontWeight: "600",
    color: Color.grayBlack,
    textAlign: "left",
    width: 83,
    alignItems: "center",
    display: "flex",
    fontSize: FontSize.med_size,
    fontFamily: FontFamily.dGBaysan,
    lineHeight: 30,
    height: 24,
    left:"5%"
  },
  frameShadowBox: {
    zIndex: 0,
    borderWidth: 0.3,
    borderColor: Color.praimary,
    borderStyle: "solid",
    borderRadius: Border.br_5xs,
    width: 343,
    height: 48,
    shadowOpacity: 1,
    elevation: 20,
    shadowRadius: 20,
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowColor: "rgba(0, 0, 0, 0.03)",
    backgroundColor: Color.whait,
  },
  frameShadowBoxName: {
    zIndex: 0,
    borderWidth: 0.3,
    borderColor: Color.praimary,
    borderStyle: "solid",
    borderRadius: Border.br_5xs,
    width: 160,
    height: 48,
    shadowOpacity: 1,
    elevation: 20,
    shadowRadius: 20,
    marginLeft:"3%",
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowColor: "rgba(0, 0, 0, 0.03)",
    backgroundColor: Color.whait,
  },
  vuesaxoutlinecallIcon: {
    width: 18,
    height: 18,
  },
  text: {
    color: Color.black,
    marginLeft: 8,
    fontSize: FontSize.med_size,
    textAlign: "center",
    fontFamily: FontFamily.dGBaysan,
  },
  vuesaxoutlinecallParent: {
    left: "10%",
  },
  rectangleContainer: {
    marginTop: 4,
  },
  mobileParent: {
    marginTop: 16,
  },
  smsIcon: {
    width: 20,
    height: 20,
  },
  smsParent: {
    left: 11,
  },
  frameParent: {
    top: "17%",
    left: "5%",
    position: "absolute",
  },
  frameInner: {
    width: 121,
  },
  orSignUp: {
    fontSize: FontSize.size_sm,
    fontWeight: "300",
    width: 93,
    height: 16,
    justifyContent: "center",
    alignItems: "center",
    display: "flex",
    textAlign: "center",
    color: Color.praimary,
    fontFamily: FontFamily.dGBaysan,
    lineHeight: 30,
  },
  lineView: {
    width: 120,
  },
  lineParent: {
    justifyContent: "space-between",
    width: 343,
    alignItems: "center",
    flexDirection: "row",
  },
  frameChild1: {
    marginLeft: 40,
  },
  groupParent: {
    marginTop: 24,
    flexDirection: "row",
  },
  frameContainer: {
    marginLeft: -171.5,
    top: 680,
    alignItems: "center",
  },
  signUp: {
    backgroundColor: Color.colorGray_100,
    flex: 1,
    height: 812,
  },
});

export default SignUp;

//signup end-----------
//splash 18-2-24-------
import { StyleSheet, Text, View,Image,Dimensions, } from 'react-native'
import React, { useEffect } from 'react'
import Splash1 from './Splash1';
import { useNavigation } from "@react-navigation/native";
import { Border, Color } from "../GlobalStyles";

const Splash = () => {
    const navigation = useNavigation();
    useEffect(()=>{
        setTimeout(()=>{
         //  navigation.navigate('OnbordingCarousel')
console.log("navigations")
        },2000)
    },[]);


    const windowHeight = Dimensions.get('window').height;
  return (
    <View style={[styles.splash15]}>
    {/* <Image
      style={[styles.vectorIcon, styles.vectorIconPosition,{ height: windowHeight+130,}]}
      resizeMode="cover"
      source={require("../assets/vector1.png")}
    />
    <Image
      style={[styles.groupIcon, styles.groupIconLayout]}
      resizeMode="cover"
      source={require("../assets/group2.png")}
    />
    <View style={[styles.splash15Child, styles.vectorIconPosition]} />
    <Image
      style={[styles.groupIcon1, styles.groupIconLayout]}
      resizeMode="cover"
      source={require("../assets/group3.png")}
    />
    <Image
      style={[styles.profmLogo1111, styles.vectorIconPosition]}
      resizeMode="cover"
      source={require("../assets/profm-logo1-1-1-12.png")}
    /> */}
    <Image
        source={require("../assets/splashScreen.gif")}
        style={styles.gif}
        resizeMode="contain" // Adjust this based on your layout requirements
      />
  </View>
);
};

const styles = StyleSheet.create({
  gif: {
    width: "100%",
    height: "100%",
  },
vectorIconPosition: {
  left: "50%",
  position: "absolute",
},
groupIconLayout: {
  maxHeight: "100%",
  maxWidth: "100%",
  position: "absolute",
  overflow: "hidden",
},
vectorIcon: {
  marginLeft: "-92%",
  top: "-13%",
  width: "190%",
 
},
groupIcon: {
  height: "12.87%",
  top: "87.07%",
  right: "0%",
  bottom: "0.06%",
  left: "0%",
  width: "100%",
  maxHeight: "100%",
  maxWidth: "100%",
},
splash15Child: {
  marginLeft: "-25%",
  top: "75.3%",
  borderRadius: Border.br_8xs,
  backgroundColor: Color.colorGainsboro_200,
  width: 240,
  height: 12,
},
groupIcon1: {
  height: "7.36%",
  width: "8.16%",
  top: "69.70%",
  right: "70.93%",
  bottom: "34.67%",
  left: "21.31%",
},
profmLogo1111: {
  marginLeft: -99.5,
  top: 380,
  width: 200,
  height: 70,
},
splash15: {
  backgroundColor: Color.colorGray_100,
  flex: 1,
  height: 812,
  overflow: "hidden",
  width: "100%",
},
});

export default Splash;

//splash end---------------
//home 20-2-24------
import React, { useState, useCallback } from "react";
import { Text, StyleSheet, Image, View, Pressable, Modal, ScrollView,Dimensions,Button,TouchableOpacity, FlatList  } from "react-native";
import LinearGradient from "react-native-linear-gradient";
import ViewDetails6 from "./ViewDetails6";
import ViewDetails5 from "./ViewDetails5";
import ViewDetails4 from "./ViewDetails4";
import { useNavigation } from "@react-navigation/native";
import YearlyServiceSection from "./YearlyServiceSection";
import BestOffersSection from "./BestOffersSection";
import FormSection from "./FormSection";
import Property1Default3 from "./Property1Default3";
import Property1Default4 from "./Property1Default4";
import SectionMenu from "./SectionMenu";
import { Color, FontFamily, FontSize,Border } from "../GlobalStyles";
import DiscountCarousal from "../screens/DiscountCarousal";
import { isEnabled } from "react-native/Libraries/Performance/Systrace";




{/* */}
const CustomRadioButton = ({ options, selectedOption, onSelect }) => {
  const renderItem = ({ item }) => (
    <TouchableOpacity
      style={[
        styles.radioButton,
        { backgroundColor: selectedOption === item.key ? Color.praimary : 'transparent' },
        item.key === options.length ? styles.lastRadioButton : null,
      ]}
      onPress={() => onSelect(item.key)}
    >
      <Text
        style={[
          styles.radioText,
          { color: selectedOption === item.key ? 'white' : Color.praimary },
        ]}
      >
        {item.text}
      </Text>
    </TouchableOpacity>
  );

  const renderSelectedView = () => {
    
  const [frameContainer22Visible, setFrameContainer22Visible] = useState(false);
  const [frameContainer30Visible, setFrameContainer30Visible] = useState(false);
  const [frameContainer38Visible, setFrameContainer38Visible] = useState(false);
    const openFrameContainer22 = useCallback(() => {
      setFrameContainer22Visible(true);
    }, []);
  
    const closeFrameContainer22 = useCallback(() => {
      setFrameContainer22Visible(false);
    }, []);
  
    const openFrameContainer30 = useCallback(() => {
      setFrameContainer30Visible(true);
    }, []);
  
    const closeFrameContainer30 = useCallback(() => {
      setFrameContainer30Visible(false);
    }, []);
  
    const openFrameContainer38 = useCallback(() => {
      setFrameContainer38Visible(true);
    }, []);
  
    const closeFrameContainer38 = useCallback(() => {
      setFrameContainer38Visible(false);
    }, []);
    const selectedItem = options.find((item) => item.key === selectedOption);
    if (!selectedItem) return null;

    switch (selectedItem.key) {
      case 1:
        return(
          <View style={styles.groupContainer}>
          <FormSection
            cleaningServiceImageId={require("../assets/younghousekeeperfemalewithcleaningsupply-1.png")}
            cleaningTypeImageUrl="Regular cleaning"
            cleaningOptionImageId="(2 "
            rating="4.3"
            priceText="79 SAR "
            servicePriceText="100 SAR "
            discountPercentage="off 30 %"
            onFramePressablePress={openFrameContainer22}
          />
          {/*toggle btn */}
         
           {/*toggle btn */}
          <FormSection
            cleaningServiceImageId={require("../assets/younghousekeeperfemalewithcleaningsupply-11.png")}
            cleaningTypeImageUrl="deep cleaning"
            cleaningOptionImageId="(4 "
            rating="4.6"
            priceText="240 SAR "
            servicePriceText="300 SAR "
            discountPercentage="off 20 %"
            propMarginTop={16}
            propLeft={291}
            onFramePressablePress={openFrameContainer30}
          />
          <FormSection
            cleaningServiceImageId={require("../assets/younghousekeeperfemalewithcleaningsupply-12.png")}
            cleaningTypeImageUrl="Facade cleaning"
            cleaningOptionImageId="(4 "
            rating="4.8"
            priceText="700 SAR "
            servicePriceText="900 SAR "
            discountPercentage="off 15 %"
            propMarginTop={16}
            propLeft={295}
            onFramePressablePress={openFrameContainer38}
          />
        </View>
        ) ;
      case 2:
        return <View style={styles.view}><Text>Hospitality</Text></View>;
      case 3:
        return <View style={styles.view}><Text>Maintenance</Text></View>;
      case 4:
        return <View style={styles.view}><Text>Electrical Works</Text></View>;
      case 5:
        return <View style={styles.view}><Text>Sanitary &Plumbing</Text></View>;
      case 6:
        return <View style={styles.view}><Text>HVAC</Text></View>;
      case 7:
        return <View style={styles.view}><Text>Pest Control</Text></View>;
      case 8:
        return <View style={styles.view}><Text>Landscape</Text></View>;
      case 9:
        return <View style={styles.view}><Text>Carpentry</Text></View>;
      default:
        return null;
    }
  };

  return (
    <>
    <FlatList
      data={options}
      renderItem={renderItem}
      keyExtractor={(item) => item.key.toString()}
      horizontal={true}
      showsHorizontalScrollIndicator={false}
    />
     {renderSelectedView()}
     
     </>
    
  );
};



// Example usage:
const options = [
  { key: 1, text: 'Cleaning' },
  { key: 2, text: 'Hospitality' },
  { key: 3, text: 'Maintenance' },
  { key: 4, text: 'Electrical Works' },
  { key: 5, text: 'Sanitary &Plumbing' },
  { key: 6, text: 'HVAC' },
  { key: 7, text: 'Pest control' },
  { key: 8, text: 'Landscaping' },
  { key: 9, text: 'Carpentry' },
];
{/* */}

const Home = () => {
  const [frameContainer22Visible, setFrameContainer22Visible] = useState(false);
  const [frameContainer30Visible, setFrameContainer30Visible] = useState(false);
  const [frameContainer38Visible, setFrameContainer38Visible] = useState(false);
  const navigation = useNavigation();
  const [selectedOption, setSelectedOption] = useState(options[0].key);

  const handleSelect = (optionKey) => {
    setSelectedOption(optionKey);
  };

  const openFrameContainer22 = useCallback(() => {
    setFrameContainer22Visible(true);
  }, []);

  const closeFrameContainer22 = useCallback(() => {
    setFrameContainer22Visible(false);
  }, []);

  const openFrameContainer30 = useCallback(() => {
    setFrameContainer30Visible(true);
  }, []);

  const closeFrameContainer30 = useCallback(() => {
    setFrameContainer30Visible(false);
  }, []);

  const openFrameContainer38 = useCallback(() => {
    setFrameContainer38Visible(true);
  }, []);

  const closeFrameContainer38 = useCallback(() => {
    setFrameContainer38Visible(false);
  }, []);

 
  const [showAdditionalButtons, setShowAdditionalButtons] = useState(false);
  const [showAdditionalButtons2, setShowAdditionalButtons2] = useState(false);
  const [showAdditionalButtons3, setShowAdditionalButtons3] = useState(false);
  const [expanded, setExpanded] = useState(false);
  const [expanded2, setExpanded2] = useState(false);
  const [expanded3, setExpanded3] = useState(false);

  const handlePress = () => {
    setExpanded(!expanded);
   
  }

  const handlePress2 = () => {
    setExpanded2(!expanded2);
    
  };

  const handlePress3 = () => {
    setExpanded3(!expanded3);
    
  }



  const toggleButtons = () => {
    setShowAdditionalButtons(!showAdditionalButtons);
  };
  const toggleButtons2 = () => {
    setShowAdditionalButtons2(!showAdditionalButtons2);
  };
  const toggleButtons3 = () => {
    setShowAdditionalButtons3(!showAdditionalButtons3);
  };

  const handleSelection = (option) => {
    // Handle selection logic here
    console.log('Selected:', option);
    // Minimize additional buttons after selection
    setShowAdditionalButtons(false);
  };

  const handleSelection2 = (option) => {
    // Handle selection logic here
    console.log('Selected:', option);
    // Minimize additional buttons after selection
    setShowAdditionalButtons2(false);
  };
  const handleSelection3 = (option) => {
    // Handle selection logic here
    console.log('Selected:', option);
    // Minimize additional buttons after selection
    setShowAdditionalButtons3(false);
  };
  const windowHeight = Dimensions.get('window').height;
  const windowWidth = Dimensions.get('window').width;
  let additionalButtonsHeight = 0;
  let additionalButtonsHeight2 = 0;
  let additionalButtonsHeight3 = 0;
  if (expanded) {
    // Calculate additional buttons height based on number of buttons and their styling
    additionalButtonsHeight = 326; // Change this value based on your actual requirements
  }
  if (expanded2) {
    // Calculate additional buttons height based on number of buttons and their styling
    additionalButtonsHeight2 = 71; // Change this value based on your actual requirements
  }
  if (expanded3) {
    // Calculate additional buttons height based on number of buttons and their styling
    additionalButtonsHeight3 = 71; // Change this value based on your actual requirements
  }
  const totalHeight = windowHeight + additionalButtonsHeight+additionalButtonsHeight2+additionalButtonsHeight3;

  return (
    <>
    <ScrollView>
      <View style={[styles.home,{ height:totalHeight+510,width:windowWidth}]}>
        <View style={styles.khaledAlQahtaniParent}>
          <Text style={[styles.khaledAlQahtani, styles.servicesTypo]}>
            Khaled Al Qahtani
          </Text>
          <View style={styles.groupParent}>
            <Image
              style={styles.groupIcon}
              resizeMode="cover"
              source={require("../assets/group13.png")}
            />
            <Text style={styles.alRawdahDistrict}>
              Al Rawdah district , Jeddah
            </Text>
          </View>
        </View>
        
        <TouchableOpacity
          style={styles.frame}
          onPress={() => navigation.navigate("Notifications")}
        >
          <Image
            style={styles.icon}
            resizeMode="cover"
            source={require("../assets/FrameNotify.png")}
          />
        </TouchableOpacity>
        <Text style={[styles.services,{top: 375}, styles.servicesTypo]}>Services</Text>
        {/* <View style={[styles.homeChild, styles.homeChildPosition]} /> */}
        <Image
          style={[styles.profmLogo1112, styles.homeChildPosition]}
          resizeMode="cover"
          source={require("../assets/profm-logo1-1-1-2.png")}
        />
        <View style={[styles.frameParent, styles.homeChildPosition,{top: 400,}]}>
          {/* <YearlyServiceSection /> */}
          
          <Pressable
      style={[styles.property1oneTimeService, ]}
      onPress={handlePress}
    >
      <View style={styles.property1oneTimeServiceChild} />
      <View style={styles.oneTimeServiceParent}>
        <Text style={[styles.oneTimeService, styles.oneTypo]}>
          One Time Service
        </Text>
        <Text
          style={[
            styles.oneTimeHourlyReservation,
            styles.oneTypo,
            
          ]}
        >
          One time hourly reservation service
        </Text>
      </View>
      
      <Image
        style={styles.property1oneTimeServiceItem}
        resizeMode="cover"
        source={require("../assets/rectangle-4369.png")}
      />
      <TouchableOpacity  style={styles.groupIconN} onPress={handlePress}>
      <Image
       
        resizeMode="cover"
        source={require("../assets/group1.png")}
      />
      </TouchableOpacity>
     
    </Pressable>
    <View style={styles.container}>
     
    {expanded && (
      <View style={{
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row',
    flexWrap: 'wrap',
   marginTop:5
  }}>
  <TouchableOpacity >
      <View style={styles.customView} >
        <Image
          source={require('../assets/cleanimage.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Cleaning service</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity>
      <View style={styles.customView}>
        <Image
          source={require('../assets/hospitality.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Hospitality</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity>
      <View style={styles.customView}>
        <Image
          source={require('../assets/pool.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Pool Maintenance</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity>
      <View style={styles.customView}>
        <Image
          source={require('../assets/electric.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Electrical Works</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity>
      <View style={styles.customView}>
        <Image
          source={require('../assets/sanitary.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Sanitary&Plumbing</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity>
      <View style={styles.customView}>
        <Image
          source={require('../assets/hvac.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>HVAC</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity>
      <View style={styles.customView}>
        <Image
          source={require('../assets/pest2.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Pest Control</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity>
      <View style={styles.customView}>
        <Image
          source={require('../assets/landscape.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Landscaping</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity>
      <View style={{backgroundColor: 'white',
    padding: 10,
    marginBottom: 5,
    borderRadius: 5,
    flexDirection: 'row',
    alignItems: 'center',
    borderColor: '#d7e1e5',
    borderWidth: 1,
    width: 163,
    margin:8,
    height:50,
    left:"-28%"}}>
        <Image
          source={require('../assets/carpentry.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Carpentry</Text>
      </View>
      </TouchableOpacity>
      {/* Repeat for remaining views */}
    </View>
      )}
   </View>
   
     {/* <YearlyServiceSection /> */}
     <Pressable 
      style={[styles.property1oneTimeService, ]}
      onPress={handlePress2}
    >
      <View style={styles.property1oneTimeServiceChild} />
      <View style={styles.oneTimeServiceParent}>
        <Text style={[styles.oneTimeService, styles.oneTypo]}>
          Monthly Service
        </Text>
        <Text
          style={[
            styles.oneTimeHourlyReservation,
            styles.oneTypo,
            
          ]}
        >
          Periodic service with several visits monthly.
        </Text>
      </View>
      
      <Image
        style={styles.property1oneTimeServiceItem}
        resizeMode="cover"
        source={require("../assets/monthly.png")}
      />
      <TouchableOpacity  style={styles.groupIconN} onPress={handlePress2}>
      <Image
       
        resizeMode="cover"
        source={require("../assets/group1.png")}
      />
      </TouchableOpacity>
     
     
    </Pressable>
    
    <View style={styles.container}>
     
    {expanded2 && (
      <View style={{
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row',
    flexWrap: 'nowrap', // Adjust the margin as needed
    marginTop: 5,
    margin:10,
    left:26
    
  }}>
  <TouchableOpacity>
      <View style={styles.customView2}>
        <Image
          source={require('../assets/cleanimage.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Cleaning service</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity>
      <View style={styles.customView2}>
        <Image
          source={require('../assets/hvac.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>HVAC</Text>
      </View>
      </TouchableOpacity>
      
      
     
       
      
     
     
    </View>
      )}
   </View>
    

      {/* <YearlyServiceSection /> */}
      <Pressable

      
      style={[styles.property1oneTimeService, ]}
      onPress={handlePress3}
    >
      <View style={styles.property1oneTimeServiceChild} />
      <View style={styles.oneTimeServiceParent}>
        <Text style={[styles.oneTimeService, styles.oneTypo]}>
         Yearly Service
        </Text>
        <Text
          style={[
            styles.oneTimeHourlyReservation,
            styles.oneTypo,
            
          ]}
        >
          Multi-visit yearly service available through contract
        </Text>
      </View>
      
      <Image
        style={styles.property1oneTimeServiceItem}
        resizeMode="cover"
        source={require("../assets/yearly.png")}
      />
      

      <TouchableOpacity  style={styles.groupIconN} onPress={handlePress3}>
      <Image
       
        resizeMode="cover"
        source={require("../assets/group1.png")}
      />
      </TouchableOpacity>
     
    </Pressable>
    <View style={styles.container}>
     
    {expanded3 && (
      <View style={{
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row',
    flexWrap: 'nowrap', // Adjust the margin as needed
    marginTop: 5,
    margin:10,
    left:26
  }}>
  <TouchableOpacity>
      <View style={styles.customView3}>
        <Image
          source={require('../assets/cleanimage.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Cleaning service</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity>
      <View style={styles.customView3}>
        <Image
          source={require('../assets/hvac.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>HVAC</Text>
      </View>
      </TouchableOpacity>
      
      
     
       
      
     
     
    </View>
      )}
   </View>
   

           {/* <YearlyServiceSection /> */}
           <View style={{top:"2%",width:360}}>
           <Text style={{color:"black",fontWeight:"bold",padding:5,left:"0%"}}>Best Offers</Text>
           {options.length > 0 && (
        <CustomRadioButton options={options} selectedOption={selectedOption} onSelect={handleSelect}  />
      )}</View>
          {/* <BestOffersSection /> */}
          <Modal animationType="fade" transparent visible={frameContainer22Visible}>
        <View style={styles.frameContainer22Overlay}>
          <Pressable
            style={styles.frameContainer22Bg}
            onPress={closeFrameContainer22}
          />
          <ViewDetails6 onClose={closeFrameContainer22} />
        </View>
      </Modal>

      <Modal animationType="fade" transparent visible={frameContainer30Visible}>
        <View style={styles.frameContainer30Overlay}>
          <Pressable
            style={styles.frameContainer30Bg}
            onPress={closeFrameContainer30}
          />
          <ViewDetails5 onClose={closeFrameContainer30} />
        </View>
      </Modal>

      <Modal animationType="fade" transparent visible={frameContainer38Visible}>
        <View style={styles.frameContainer38Overlay}>
          <Pressable
            style={styles.frameContainer38Bg}
            onPress={closeFrameContainer38}
          />
          <ViewDetails4 onClose={closeFrameContainer38} />
        </View>
      </Modal>
        </View>
        <Property1Default3
          fiRrZoomOut={require("../assets/firrzoomout.png")}
          property1DefaultPosition="absolute"
          property1DefaultMarginLeft={"0%"}
          property1DefaultTop={140}
          property1DefaultLeft="2%"
        />
        {/* <Property1Default4 /> */}
        <DiscountCarousal/>
       
      </View>

      {/* <Modal animationType="fade" transparent visible={frameContainer22Visible}>
        <View style={styles.frameContainer22Overlay}>
          <Pressable
            style={styles.frameContainer22Bg}
            onPress={closeFrameContainer22}
          />
          <ViewDetails6 onClose={closeFrameContainer22} />
        </View>
      </Modal>

      <Modal animationType="fade" transparent visible={frameContainer30Visible}>
        <View style={styles.frameContainer30Overlay}>
          <Pressable
            style={styles.frameContainer30Bg}
            onPress={closeFrameContainer30}
          />
          <ViewDetails5 onClose={closeFrameContainer30} />
        </View>
      </Modal>

      <Modal animationType="fade" transparent visible={frameContainer38Visible}>
        <View style={styles.frameContainer38Overlay}>
          <Pressable
            style={styles.frameContainer38Bg}
            onPress={closeFrameContainer38}
          />
          <ViewDetails4 onClose={closeFrameContainer38} />
        </View>
      </Modal> */}
      </ScrollView>
    </>
  );
};

const styles = StyleSheet.create({
  servicesTypo: {
    textAlign: "left",
    color: Color.colorBlack,
    textTransform: "capitalize",
    fontFamily: FontFamily.dGBaysan,
  },
  
  imageD: {
    width: 20,
    height: 20,
    marginRight: 10,
  },
  customView2: {
    width: 163, // Two views per row
    backgroundColor: 'white',
    padding: 10,
    marginBottom: 5,
    borderRadius: 5,
    flexDirection: 'row',
    alignItems: 'center',
    borderColor: '#d7e1e5',
    borderWidth: 1,
    margin:5,
    height:50,
  },
  customView3: {
    width: 163, // Two views per row
    backgroundColor: 'white',
    padding: 10,
    marginBottom: 5,
    borderRadius: 5,
    flexDirection: 'row',
    alignItems: 'center',
    borderColor: '#d7e1e5',
    borderWidth: 1,
    margin:5,
    height:50,
  },
  textD: {
    fontSize: 14,
    color:"black"
  },
  customView: {
    backgroundColor: 'white',
    padding: 10,
    marginBottom: 5,
    borderRadius: 5,
    flexDirection: 'row',
    alignItems: 'center',
    borderColor: '#d7e1e5',
    borderWidth: 1,
    width: 163,
    margin:8,
    height:50, // Two views per row
  },
  
  radioButton: {
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 20,
    borderWidth: 2,
    borderColor:Color.praimary,
    marginHorizontal: 5,
  },
  lastRadioButton: {
    borderRightWidth: 0,
  },
  radioText: {
    fontSize: 16,
  },
  homeChildPosition: {
    left: "47.5%",
    position: "absolute",
  },
  oneTypo: {
    textAlign: "left",
    fontFamily: FontFamily.dGBaysan,
  },
  property1oneTimeServiceChild: {
    height: "100%",
    width: "100%",
    top: "0%",
    right: "0%",
    bottom: "0%",
    left: "0%",
    borderRadius: Border.br_5xs,
    backgroundColor: Color.colorAliceblue_200,
    borderStyle: "solid",
    borderColor: Color.praimary,
    borderWidth: 0.5,
    position: "absolute",
  },
  oneTimeService: {
    fontSize: FontSize.size_sm,
    textTransform: "capitalize",
    fontWeight: "600",
    color: Color.praimary,
    display: "flex",
    alignItems: "center",
    width: 120,
    height: 16,
  },
  oneTimeHourlyReservation: {
    fontSize: FontSize.med_size,
    lineHeight: 18,
    fontWeight: "300",
    color: Color.grayBlack,
    width: 184,
    height: 34,
    marginTop: 4,
  },
  oneTimeServiceParent: {
    top: 16,
    left: 16,
    position: "absolute",
  },
  property1oneTimeServiceItem: {
    top: 0,
    left: "62%",
    borderTopRightRadius: Border.br_5xs,
    borderBottomRightRadius: Border.br_5xs,
    width: 130,
    position: "absolute",
    height: 86,
  },
  groupIconN: {
    height: "8.14%",
    marginLeft: -5.5,
    top: "82.56%",
    bottom: "9.3%",
    left: "50%",
    maxHeight: "100%",
    width: "10%",
    position: "absolute",
  },
  property1oneTimeService: {
    shadowColor: "rgba(0, 0, 0, 0.05)",
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowRadius: 15,
    elevation: 15,
    shadowOpacity: 1,
    width: 343,
    height: 86,
    marginTop:10
  },
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  frameContainer22Overlay: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "rgba(113, 113, 113, 0.3)",
  },
  frameContainer22Bg: {
    position: "absolute",
    width: "100%",
    height: "100%",
    left: 0,
    top: 0,
  },
  frameContainer30Overlay: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "rgba(113, 113, 113, 0.3)",
  },
  frameContainer30Bg: {
    position: "absolute",
    width: "100%",
    height: "100%",
    left: 0,
    top: 0,
  },
  frameContainer38Overlay: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "rgba(113, 113, 113, 0.3)",
  },
  frameContainer38Bg: {
    position: "absolute",
    width: "100%",
    height: "100%",
    left: 0,
    top: 0,
  },
  khaledAlQahtani: {
    fontSize: FontSize.size_sm,
    width: 130,
    fontWeight: "300",
    color: Color.colorBlack,
    textTransform: "capitalize",
  },
  groupIcon: {
    width: 10,
    height: 14,
  },
  alRawdahDistrict: {
    fontSize: FontSize.med_size,
    color: Color.grayBlack,
    textAlign: "center",
    marginLeft: "2%",
    fontFamily: FontFamily.dGBaysan,
    fontWeight: "300",
  },
  groupParent: {
    flexDirection: "row",
    justifyContent: "center",
    marginTop: 4,
    alignItems: "center",
    height: 14,
  },
  khaledAlQahtaniParent: {
    top: 74,
    height: 37,
    left: "4%",
    position: "absolute",
  },
  icon: {
    width: "100%",
    height: "100%",
    overflow: "hidden",
  },
  frame: {
    right: "10%",
    top: 78,
    width: 24,
    height: 24,
    position: "absolute",
  },
  services: {
   
    fontSize: FontSize.size_base,
    fontWeight: "600",
    display: "flex",
    width: 68,
    height: 18,
    alignItems: "center",
    color: Color.colorBlack,
    textTransform: "capitalize",
    left: "4%",
    position: "absolute",
  },
  homeChild: {
    marginLeft: -174.5,
    top: 905,
    width: 349,
    height: 97,
    overflow: "hidden",
  },
  profmLogo1112: {
    marginLeft:"-9%",
    top: 35,
    width: 110,
    height: 30,
  },
  groupContainer: {
    marginTop: 24,
  },
  frameParent: {
    marginLeft: "-45.5%",
    
  },
  home: {
    backgroundColor: Color.colorGray_100,
   
   
  },
});

export default Home;

//home end------------
//home start 25-2-24--
import React, { useState, useCallback,useEffect } from "react";
import { Text, StyleSheet, Image, View, Pressable,BackHandler, Modal, ScrollView,Dimensions,Button,TouchableOpacity, FlatList, TextInput  } from "react-native";
import LinearGradient from "react-native-linear-gradient";
import ViewDetails6 from "./ViewDetails6";
import ViewDetails5 from "./ViewDetails5";
import ViewDetails4 from "./ViewDetails4";
import { useNavigation } from "@react-navigation/native";
import YearlyServiceSection from "./YearlyServiceSection";
import BestOffersSection from "./BestOffersSection";
import FormSection from "./FormSection";
import Property1Default3 from "./Property1Default3";
import Property1Default4 from "./Property1Default4";
import SectionMenu from "./SectionMenu";
import { Color, FontFamily, FontSize,Border } from "../GlobalStyles";
import DiscountCarousal from "../screens/DiscountCarousal";
import { isEnabled } from "react-native/Libraries/Performance/Systrace";
import { Badge } from 'react-native-paper';
import messaging from '@react-native-firebase/messaging';




{/* */}
const CustomRadioButton = ({ options, selectedOption, onSelect }) => {
  const renderItem = ({ item }) => (
    <TouchableOpacity
      style={[
        styles.radioButton,
        { backgroundColor: selectedOption === item.key ? Color.praimary : 'transparent' },
        item.key === options.length ? styles.lastRadioButton : null,
      ]}
      onPress={() => onSelect(item.key)}
    >
      <Text
        style={[
          styles.radioText,
          { color: selectedOption === item.key ? 'white' : Color.praimary },
        ]}
      >
        {item.text}
      </Text>
    </TouchableOpacity>
  );

  const renderSelectedView = () => {
    
  const [frameContainer22Visible, setFrameContainer22Visible] = useState(false);
  const [frameContainer30Visible, setFrameContainer30Visible] = useState(false);
  const [frameContainer38Visible, setFrameContainer38Visible] = useState(false);
    const openFrameContainer22 = useCallback(() => {
      setFrameContainer22Visible(true);
    }, []);
  
    const closeFrameContainer22 = useCallback(() => {
      setFrameContainer22Visible(false);
    }, []);
  
    const openFrameContainer30 = useCallback(() => {
      setFrameContainer30Visible(true);
    }, []);
  
    const closeFrameContainer30 = useCallback(() => {
      setFrameContainer30Visible(false);
    }, []);
  
    const openFrameContainer38 = useCallback(() => {
      setFrameContainer38Visible(true);
    }, []);
  
    const closeFrameContainer38 = useCallback(() => {
      setFrameContainer38Visible(false);
    }, []);
    const selectedItem = options.find((item) => item.key === selectedOption);
    if (!selectedItem) return null;

    switch (selectedItem.key) {
      case 1:
        return(
          <View style={styles.groupContainer}>
          <FormSection
            cleaningServiceImageId={require("../assets/younghousekeeperfemalewithcleaningsupply-1.png")}
            cleaningTypeImageUrl="Regular cleaning"
            cleaningOptionImageId="(2 "
            rating="4.3"
            priceText="79 SAR "
            servicePriceText="100 SAR "
            discountPercentage="off 30 %"
            onFramePressablePress={openFrameContainer22}
          />
          {/*toggle btn */}
         
           {/*toggle btn */}
          <FormSection
            cleaningServiceImageId={require("../assets/younghousekeeperfemalewithcleaningsupply-11.png")}
            cleaningTypeImageUrl="deep cleaning"
            cleaningOptionImageId="(4 "
            rating="4.6"
            priceText="240 SAR "
            servicePriceText="300 SAR "
            discountPercentage="off 20 %"
            propMarginTop={16}
            propLeft={291}
            onFramePressablePress={openFrameContainer30}
          />
          <FormSection
            cleaningServiceImageId={require("../assets/younghousekeeperfemalewithcleaningsupply-12.png")}
            cleaningTypeImageUrl="Facade cleaning"
            cleaningOptionImageId="(4 "
            rating="4.8"
            priceText="700 SAR "
            servicePriceText="900 SAR "
            discountPercentage="off 15 %"
            propMarginTop={16}
            propLeft={295}
            onFramePressablePress={openFrameContainer38}
          />
        </View>
        ) ;
      case 2:
        return <View style={styles.view}><Text>Hospitality</Text></View>;
      case 3:
        return <View style={styles.view}><Text>Maintenance</Text></View>;
      case 4:
        return <View style={styles.view}><Text>Electrical Works</Text></View>;
      case 5:
        return <View style={styles.view}><Text>Sanitary &Plumbing</Text></View>;
      case 6:
        return <View style={styles.view}><Text>HVAC</Text></View>;
      case 7:
        return <View style={styles.view}><Text>Pest Control</Text></View>;
      case 8:
        return <View style={styles.view}><Text>Landscape</Text></View>;
      case 9:
        return <View style={styles.view}><Text>Carpentry</Text></View>;
      default:
        return null;
    }
  };

  return (
    <>
    <FlatList
      data={options}
      renderItem={renderItem}
      keyExtractor={(item) => item.key.toString()}
      horizontal={true}
      showsHorizontalScrollIndicator={false}
    />
     {renderSelectedView()}
     
     </>
    
  );
};



// Example usage:
const options = [
  { key: 1, text: 'Cleaning' },
  { key: 2, text: 'Hospitality' },
  { key: 3, text: 'Maintenance' },
  { key: 4, text: 'Electrical Works' },
  { key: 5, text: 'Sanitary &Plumbing' },
  { key: 6, text: 'HVAC' },
  { key: 7, text: 'Pest control' },
  { key: 8, text: 'Landscaping' },
  { key: 9, text: 'Carpentry' },
];
{/* */}

const Home = () => {

  useEffect(() => {
    const backAction = () => {
      // Return true to prevent going back
      return true;
    };

    // Add event listener for the hardware back button
    const backHandler = BackHandler.addEventListener(
      'hardwareBackPress',
      backAction
    );

    // Remove the event listener when the component unmounts
    return () => backHandler.remove();
  }, []);
  //back end--
  const [frameContainer22Visible, setFrameContainer22Visible] = useState(false);
  const [frameContainer30Visible, setFrameContainer30Visible] = useState(false);
  const [frameContainer38Visible, setFrameContainer38Visible] = useState(false);
  const navigation = useNavigation();
  const [selectedOption, setSelectedOption] = useState(options[0].key);

  const handleSelect = (optionKey) => {
    setSelectedOption(optionKey);
  };

  const openFrameContainer22 = useCallback(() => {
    setFrameContainer22Visible(true);
  }, []);

  const closeFrameContainer22 = useCallback(() => {
    setFrameContainer22Visible(false);
  }, []);

  const openFrameContainer30 = useCallback(() => {
    setFrameContainer30Visible(true);
  }, []);

  const closeFrameContainer30 = useCallback(() => {
    setFrameContainer30Visible(false);
  }, []);

  const openFrameContainer38 = useCallback(() => {
    setFrameContainer38Visible(true);
  }, []);

  const closeFrameContainer38 = useCallback(() => {
    setFrameContainer38Visible(false);
  }, []);

 
  const [showAdditionalButtons, setShowAdditionalButtons] = useState(false);
  const [showAdditionalButtons2, setShowAdditionalButtons2] = useState(false);
  const [showAdditionalButtons3, setShowAdditionalButtons3] = useState(false);
  const [expanded, setExpanded] = useState(false);
  const [expanded2, setExpanded2] = useState(false);
  const [expanded3, setExpanded3] = useState(false);

  const naviClean=()=>{
    navigation.navigate('OneTimeService')
  };
  const naviHosp=()=>{
    navigation.navigate('HospitalityServices')
  };
  const naviPool=()=>{
    navigation.navigate('PoolMaintenance')
  };
  const naviElec=()=>{
    navigation.navigate('ElectricalWorks')
  };
  const naviSanitary=()=>{
    navigation.navigate('SanitaryPlumbing')
  };
  const naviHVAC=()=>{
    navigation.navigate('HVAC')
  };
  const naviPest=()=>{
    navigation.navigate('PestControl')
  };
  const naviLand=()=>{
    navigation.navigate('LANDSCAPING')
  };
  const naviCarp=()=>{
    navigation.navigate('CarpentryWork')
  };

  const handlePress = () => {
    setExpanded(!expanded);
   
  }

  const handlePress2 = () => {
    setExpanded2(!expanded2);
    
  };

  const handlePress3 = () => {
    setExpanded3(!expanded3);
    
  }



  const toggleButtons = () => {
    setShowAdditionalButtons(!showAdditionalButtons);
  };
  const toggleButtons2 = () => {
    setShowAdditionalButtons2(!showAdditionalButtons2);
  };
  const toggleButtons3 = () => {
    setShowAdditionalButtons3(!showAdditionalButtons3);
  };

  const handleSelection = (option) => {
    // Handle selection logic here
    console.log('Selected:', option);
    // Minimize additional buttons after selection
    setShowAdditionalButtons(false);
  };

  const handleSelection2 = (option) => {
    // Handle selection logic here
    console.log('Selected:', option);
    // Minimize additional buttons after selection
    setShowAdditionalButtons2(false);
  };
  const handleSelection3 = (option) => {
    // Handle selection logic here
    console.log('Selected:', option);
    // Minimize additional buttons after selection
    setShowAdditionalButtons3(false);
  };
  const windowHeight = Dimensions.get('window').height;
  const windowWidth = Dimensions.get('window').width;
  let additionalButtonsHeight = 0;
  let additionalButtonsHeight2 = 0;
  let additionalButtonsHeight3 = 0;
  if (expanded) {
    // Calculate additional buttons height based on number of buttons and their styling
    additionalButtonsHeight = 326; // Change this value based on your actual requirements
  }
  if (expanded2) {
    // Calculate additional buttons height based on number of buttons and their styling
    additionalButtonsHeight2 = 71; // Change this value based on your actual requirements
  }
  if (expanded3) {
    // Calculate additional buttons height based on number of buttons and their styling
    additionalButtonsHeight3 = 71; // Change this value based on your actual requirements
  }
  const totalHeight = windowHeight + additionalButtonsHeight+additionalButtonsHeight2+additionalButtonsHeight3;

//push noti counter--
const [notificationCount, setNotificationCount] = useState(0);
const check=async()=>{
const fcmToken = await messaging().getToken();
console.log(fcmToken)
}
check();
useEffect(() => {
  // Request permission for receiving notifications (optional)
  messaging().requestPermission();

  // Get initial notification count when app is opened
  messaging().getInitialNotification().then(notification => {
    if (notification) {
      setNotificationCount(notificationCount + 1);
    }
  });

  // Register listener for receiving messages while the app is in foreground
  const unsubscribe = messaging().onMessage(async remoteMessage => {
    setNotificationCount(notificationCount + 1);
  });

  // Register background message handler for receiving messages while the app is in background or terminated
  messaging().setBackgroundMessageHandler(async remoteMessage => {
    setNotificationCount(notificationCount + 1);
  });

  return unsubscribe;
}, []);

//push noti counter end--





  return (
    <>
    <ScrollView>
      <View style={[styles.home,{ height:totalHeight+510,width:windowWidth}]}>
        <View style={styles.khaledAlQahtaniParent}>
          <Text style={[styles.khaledAlQahtani, styles.servicesTypo]}>
            Khaled Al Qahtani
          </Text>
          <View style={styles.groupParent}>
            <Image
              style={styles.groupIcon}
              resizeMode="cover"
              source={require("../assets/group13.png")}
            />
            <Text style={styles.alRawdahDistrict}>
              Al Rawdah district , Jeddah
            </Text>
          </View>
          </View>
        
          <TouchableOpacity
    style={[styles.frame, { position: 'absolute', top: 78, right:"4%", zIndex: 10 }]}
    onPress={() => {
      navigation.navigate("Notifications");
    }}
  >
  <View style={{top:6}}>
    <Badge visible={notificationCount > 0} size={15}>
        {notificationCount}
      </Badge>
      </View>
    <Image
      style={styles.icon}
      resizeMode="cover"
      source={require("../assets/notificationIcon1.png")}
    />
    
  </TouchableOpacity>
        <Text style={[styles.services,{top: 375}, styles.servicesTypo]}>Services</Text>
        {/* <View style={[styles.homeChild, styles.homeChildPosition]} /> */}
        <Image
          style={[styles.profmLogo1112, {position:"absolute",left:"35%"}]}
          resizeMode="cover"
          source={require("../assets/profm-logo1-1-1-2.png")}
        />
        <View style={[styles.frameParent, styles.homeChildPosition,{top: 400,}]}>
          {/* <YearlyServiceSection /> */}
          
          <Pressable
      style={[styles.property1oneTimeService, ]}
      onPress={handlePress}
    >
      <View style={styles.property1oneTimeServiceChild} />
      <View style={styles.oneTimeServiceParent}>
        <Text style={[styles.oneTimeService, styles.oneTypo]}>
          One Time Service
        </Text>
        <Text
          style={[
            styles.oneTimeHourlyReservation,
            styles.oneTypo,
            
          ]}
        >
          One time hourly reservation service
        </Text>
      </View>
      
      <Image
        style={styles.property1oneTimeServiceItem}
        resizeMode="cover"
        source={require("../assets/rectangle-4369.png")}
      />
      <TouchableOpacity  style={styles.groupIconN} onPress={handlePress}>
      <Image
       
        resizeMode="cover"
        source={expanded ? require("../assets/group1Flip.png") : require("../assets/group1.png")}
      />
      </TouchableOpacity>
     
    </Pressable>
    <View style={styles.container}>
     
    {expanded && (
      <View style={{
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row',
    flexWrap: 'wrap',
   left:"-4%",
   marginTop:5
  }}>
  <TouchableOpacity onPress={naviClean}>
      <View style={styles.customView}>
        <Image
          source={require('../assets/cleanimage.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Cleaning service</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity onPress={naviHosp}>
      <View style={styles.customView}>
        <Image
          source={require('../assets/hospitality.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Hospitality</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity onPress={naviPool}>
      <View style={styles.customView}>
        <Image
          source={require('../assets/pool.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Pool Maintenance</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity onPress={naviElec}>
      <View style={styles.customView}>
        <Image
          source={require('../assets/electric.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Electrical Works</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity onPress={naviSanitary}>
      <View style={styles.customView}>
        <Image
          source={require('../assets/sanitary.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Sanitary&Plumbing</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity onPress={naviHVAC}>
      <View style={styles.customView}>
        <Image
          source={require('../assets/hvac.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>HVAC</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity onPress={naviPest}>
      <View style={styles.customView}>
        <Image
          source={require('../assets/pest2.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Pest Control</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity onPress={naviLand}>
      <View style={styles.customView}>
        <Image
          source={require('../assets/landscape.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Landscaping</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity onPress={naviCarp}>
      <View style={{backgroundColor: 'white',
    padding: 10,
    marginBottom: 5,
    borderRadius: 5,
    flexDirection: 'row',
    alignItems: 'center',
    borderColor: '#d7e1e5',
    borderWidth: 1,
    width: 163,
    margin:8,
    height:50,
    left:"-28%"}}>
        <Image
          source={require('../assets/carpentry.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Carpentry</Text>
      </View>
      </TouchableOpacity>
      {/* Repeat for remaining views */}
    </View>
      )}
   </View>
   
     {/* <YearlyServiceSection /> */}
     <Pressable 
      style={[styles.property1oneTimeService, ]}
      onPress={handlePress2}
    >
      <View style={styles.property1oneTimeServiceChild} />
      <View style={styles.oneTimeServiceParent}>
        <Text style={[styles.oneTimeService, styles.oneTypo]}>
          Monthly Service
        </Text>
        <Text
          style={[
            styles.oneTimeHourlyReservation,
            styles.oneTypo,
            
          ]}
        >
          Periodic service with several visits monthly.
        </Text>
      </View>
      
      <Image
        style={styles.property1oneTimeServiceItem}
        resizeMode="cover"
        source={require("../assets/monthly.png")}
      />
      <TouchableOpacity  style={styles.groupIconN} onPress={handlePress2}>
      <Image
       
        resizeMode="cover"
        source={expanded2 ? require("../assets/group1Flip.png") : require("../assets/group1.png")}
      />
      </TouchableOpacity>
     
     
    </Pressable>
    
    <View >
     
    {expanded2 && (
      <View style={{flex:1,flexDirection:"row"}}>
  <TouchableOpacity onPress={naviClean}>
      <View style={styles.customView2}>
        <Image
          source={require('../assets/cleanimage.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Cleaning service</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity onPress={naviHVAC}>
      <View style={styles.customView2}>
        <Image
          source={require('../assets/hvac.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>HVAC</Text>
      </View>
      </TouchableOpacity>
      
      
     
       
      
     
     
    </View>
      )}
   </View>
    

      {/* <YearlyServiceSection /> */}
      <Pressable

      
      style={[styles.property1oneTimeService, ]}
      onPress={handlePress3}
    >
      <View style={styles.property1oneTimeServiceChild} />
      <View style={styles.oneTimeServiceParent}>
        <Text style={[styles.oneTimeService, styles.oneTypo]}>
         Yearly Service
        </Text>
        <Text
          style={[
            styles.oneTimeHourlyReservation,
            styles.oneTypo,
            
          ]}
        >
          Multi-visit yearly service available through contract
        </Text>
      </View>
      
      <Image
        style={styles.property1oneTimeServiceItem}
        resizeMode="cover"
        source={require("../assets/yearly.png")}
      />
      

      <TouchableOpacity  style={styles.groupIconN} onPress={handlePress3}>
      <Image
       
        resizeMode="cover"
        source={expanded3 ? require("../assets/group1Flip.png") : require("../assets/group1.png")}
      />
      </TouchableOpacity>
     
    </Pressable>
    <View style={styles.container}>
     
    {expanded3 && (
      <View style={{flex:1,flexDirection:"row"}}>
  <TouchableOpacity onPress={naviClean}>
      <View style={styles.customView3}>
        <Image
          source={require('../assets/cleanimage.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Cleaning service</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity onPress={naviHVAC}>
      <View style={styles.customView3}>
        <Image
          source={require('../assets/hvac.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>HVAC</Text>
      </View>
      </TouchableOpacity>
      
      
     
       
      
     
     
    </View>
      )}
   </View>
   

           {/* <YearlyServiceSection /> */}
           <View style={{top:"2%",width:360}}>
           <Text style={{color:"black",fontWeight:"bold",padding:5,left:"0%"}}>Best Offers</Text>
           {options.length > 0 && (
        <CustomRadioButton options={options} selectedOption={selectedOption} onSelect={handleSelect}  />
      )}</View>
          {/* <BestOffersSection /> */}
          <Modal animationType="fade" transparent visible={frameContainer22Visible}>
        <View style={styles.frameContainer22Overlay}>
          <Pressable
            style={styles.frameContainer22Bg}
            onPress={closeFrameContainer22}
          />
          <ViewDetails6 onClose={closeFrameContainer22} />
        </View>
      </Modal>

      <Modal animationType="fade" transparent visible={frameContainer30Visible}>
        <View style={styles.frameContainer30Overlay}>
          <Pressable
            style={styles.frameContainer30Bg}
            onPress={closeFrameContainer30}
          />
          <ViewDetails5 onClose={closeFrameContainer30} />
        </View>
      </Modal>

      <Modal animationType="fade" transparent visible={frameContainer38Visible}>
        <View style={styles.frameContainer38Overlay}>
          <Pressable
            style={styles.frameContainer38Bg}
            onPress={closeFrameContainer38}
          />
          <ViewDetails4 onClose={closeFrameContainer38} />
        </View>
      </Modal>
        </View>
        {/* <Property1Default3
          fiRrZoomOut={require("../assets/firrzoomout.png")}
          property1DefaultPosition="absolute"
          property1DefaultMarginLeft={"0%"}
          property1DefaultTop={140}
          property1DefaultLeft="2%"
        /> */}

        <View style={{top:130}} >
        
         
          <View style={styles.rectangleParent}>
            <View style={styles.frameShadowBox} />
            <View style={[styles.frameGroup, styles.frameGroupPosition]}>
               <View style={styles.lockParent}>
                <Image
                  style={styles.iconLayout}
                  resizeMode="cover"
                  source={require("../assets/firrzoomout.png")}
                />
                <TextInput 
            placeholder="Search"
            placeholderTextColor="#D3D3D3"
            maxLength={40}
            style={{color:"#006daa", padding: 10, marginTop: '2%'}}/>
              
              </View>
             
            </View>
            
          </View>
        </View>
        {/* <Property1Default4 /> */}
        <DiscountCarousal/>
       
      </View>

      {/* <Modal animationType="fade" transparent visible={frameContainer22Visible}>
        <View style={styles.frameContainer22Overlay}>
          <Pressable
            style={styles.frameContainer22Bg}
            onPress={closeFrameContainer22}
          />
          <ViewDetails6 onClose={closeFrameContainer22} />
        </View>
      </Modal>

      <Modal animationType="fade" transparent visible={frameContainer30Visible}>
        <View style={styles.frameContainer30Overlay}>
          <Pressable
            style={styles.frameContainer30Bg}
            onPress={closeFrameContainer30}
          />
          <ViewDetails5 onClose={closeFrameContainer30} />
        </View>
      </Modal>

      <Modal animationType="fade" transparent visible={frameContainer38Visible}>
        <View style={styles.frameContainer38Overlay}>
          <Pressable
            style={styles.frameContainer38Bg}
            onPress={closeFrameContainer38}
          />
          <ViewDetails4 onClose={closeFrameContainer38} />
        </View>
      </Modal> */}
      </ScrollView>
    </>
  );
};

const styles = StyleSheet.create({
  servicesTypo: {
    textAlign: "left",
    color: Color.colorBlack,
    textTransform: "capitalize",
    fontFamily: FontFamily.dGBaysan,
  },
  iconLayout: {
    height: 18,
    width: 18,
  },
  lockParent: {
    flexDirection: "row",
    alignItems: "center",
  },
  frameGroupPosition: {
    zIndex: 1,
    left: 12,
    flexDirection: "row",
    position: "absolute",
  },
  frameShadowBox: {
    zIndex: 0,
    height: 48,
    width: "96%",
    borderWidth: 0.3,
    borderColor: Color.a6A6A6,
    borderStyle: "solid",
    shadowOpacity: 1,
    elevation: 20,
    shadowRadius: 20,
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowColor: "rgba(0, 0, 0, 0.03)",
    backgroundColor: Color.whait,
    borderRadius: Border.br_5xs,
    left:"2%"
  },
  frameGroup: {
    top: 3,
    zIndex: 1,
    left: 12,
  },
 
  
  imageD: {
    width: 20,
    height: 20,
    marginRight: 10,
  },
  customView2: {
    width: 163, // Two views per row
    backgroundColor: 'white',
    padding: 10,
    marginBottom: 5,
    borderRadius: 5,
    flexDirection: 'row',
    alignItems: 'center',
    borderColor: '#d7e1e5',
    borderWidth: 1,
    margin:5,
    height:50,
  },
  customView3: {
    width: 163, // Two views per row
    backgroundColor: 'white',
    padding: 10,
    marginBottom: 5,
    borderRadius: 5,
    flexDirection: 'row',
    alignItems: 'center',
    borderColor: '#d7e1e5',
    borderWidth: 1,
    margin:5,
    height:50,
  },
  textD: {
    fontSize: 14,
    color:"black"
  },
  customView: {
    backgroundColor: 'white',
    padding: 10,
    marginBottom: 5,
    borderRadius: 5,
    flexDirection: 'row',
    alignItems: 'center',
    borderColor: '#d7e1e5',
    borderWidth: 1,
    width: 163,
    margin:8,
    height:50, // Two views per row
  },
  
  radioButton: {
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 20,
    borderWidth: 2,
    borderColor:Color.praimary,
    marginHorizontal: 5,
  },
  lastRadioButton: {
    borderRightWidth: 0,
  },
  radioText: {
    fontSize: 16,
  },
  homeChildPosition: {
    left: "3%",
    position: "absolute",
  },
  oneTypo: {
    textAlign: "left",
    fontFamily: FontFamily.dGBaysan,
  },
  property1oneTimeServiceChild: {
    height: "100%",
    width: "100%",
    top: "0%",
    right: "0%",
    bottom: "0%",
    left: "0%",
    borderRadius: Border.br_5xs,
    backgroundColor: Color.colorAliceblue_200,
    borderStyle: "solid",
    borderColor: Color.praimary,
    borderWidth: 0.5,
    position: "absolute",
  },
  oneTimeService: {
    fontSize: FontSize.size_sm,
    textTransform: "capitalize",
    fontWeight: "600",
    color: Color.praimary,
    display: "flex",
    alignItems: "center",
    width: 120,
    height: 16,
  },
  oneTimeHourlyReservation: {
    fontSize: FontSize.med_size,
    lineHeight: 18,
    fontWeight: "300",
    color: Color.grayBlack,
    width: 184,
    height: 34,
    marginTop: 4,
  },
  oneTimeServiceParent: {
    top: 16,
    left: 16,
    position: "absolute",
  },
  property1oneTimeServiceItem: {
    top: 0,
    left: "62%",
    borderTopRightRadius: Border.br_5xs,
    borderBottomRightRadius: Border.br_5xs,
    width: 130,
    position: "absolute",
    height: 86,
  },
  groupIconN: {
    height: "8.14%",
    marginLeft: -5.5,
    top: "82.56%",
    bottom: "9.3%",
    left: "50%",
    maxHeight: "100%",
    width: "10%",
    position: "absolute",
  },
  property1oneTimeService: {
    shadowColor: "rgba(0, 0, 0, 0.05)",
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowRadius: 15,
    elevation: 15,
    shadowOpacity: 1,
    width: "93%",
    height: 86,
    marginTop:10
  },
  frameContainer22Overlay: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "rgba(113, 113, 113, 0.3)",
  },
  frameContainer22Bg: {
    position: "absolute",
    width: "100%",
    height: "100%",
    left: 0,
    top: 0,
  },
  frameContainer30Overlay: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "rgba(113, 113, 113, 0.3)",
  },
  frameContainer30Bg: {
    position: "absolute",
    width: "100%",
    height: "100%",
    left: 0,
    top: 0,
  },
  frameContainer38Overlay: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "rgba(113, 113, 113, 0.3)",
  },
  frameContainer38Bg: {
    position: "absolute",
    width: "100%",
    height: "100%",
    left: 0,
    top: 0,
  },
  khaledAlQahtani: {
    fontSize: FontSize.size_sm,
    width: 130,
    fontWeight: "300",
    color: Color.colorBlack,
    textTransform: "capitalize",
  },
  groupIcon: {
    width: 10,
    height: 14,
  },
  alRawdahDistrict: {
    fontSize: FontSize.med_size,
    color: Color.grayBlack,
    textAlign: "center",
    marginLeft: "2%",
    fontFamily: FontFamily.dGBaysan,
    fontWeight: "300",
  },
  groupParent: {
    flexDirection: "row",
    justifyContent: "center",
    marginTop: 4,
    alignItems: "center",
    height: 14,
  },
  khaledAlQahtaniParent: {
    top: 74,
    height: 37,
    left: "4%",
    position: "absolute",
  },
  icon: {
    width: "100%",
    height: "100%",
    overflow: "hidden",
  },
  frame: {
    right: "10%",
    top: 38,
    width: 24,
    height: 24,
    position: "absolute",
  },
  services: {
   
    fontSize: FontSize.size_base,
    fontWeight: "600",
    display: "flex",
    width: 68,
    height: 18,
    alignItems: "center",
    color: Color.colorBlack,
    textTransform: "capitalize",
    left: "4%",
    position: "absolute",
  },
  homeChild: {
    marginLeft: -174.5,
    top: 905,
    width: 349,
    height: 97,
    overflow: "hidden",
  },
  profmLogo1112: {
    marginLeft:"0%",
    top: 35,
    width: 110,
    height: 39,
  },
  groupContainer: {
    marginTop: 24,
  },
 
  home: {
    backgroundColor: Color.colorGray_100,
   
   
  },
});

export default Home;

//home end--
//notifications---26-2-24--
import * as React from "react";
import { StyleSheet, View, Text, Image, Pressable } from "react-native";
import WebViewBottom from "../components/WebViewBottom";
import { useNavigation } from "@react-navigation/native";
import VisitCompletedSection from "../components/VisitCompletedSection";
import OfferSection from "../components/OfferSection";
import { FontFamily, Color, FontSize, Border } from "../GlobalStyles";

const Notifications = () => {
  const navigation = useNavigation();

  return (
    <View style={[styles.notifications, styles.iconLayout]}>
      <View style={styles.navBar}>
        <WebViewBottom
          webViewBottomPosition="absolute"
          webViewBottomBackgroundColor="#fafdff"
          webViewBottomMarginLeft={-187.5}
          webViewBottomTop={0}
          webViewBottomLeft="50%"
          webViewBottomBorderBottomRightRadius={5}
          webViewBottomBorderBottomLeftRadius={5}
          webViewBottomWidth={375}
          webViewBottomHeight={34}
          webViewBottomBottom="unset"
          homeIndicatorBackgroundColor="#1d2939"
        />
      </View>
      <Text style={[styles.youHave2Container, styles.pastNoticesFlexBox]}>
        <Text style={styles.youHave}>
          <Text style={styles.youHave1}>You have</Text>
          <Text style={styles.text}>{` `}</Text>
        </Text>
        <Text style={styles.notifications1}>2 Notifications</Text>
        <Text style={styles.youHave}>
          <Text style={styles.text}>{` `}</Text>
          <Text style={styles.youHave1}>today</Text>
        </Text>
      </Text>
      <View style={[styles.tap, styles.tapPosition]}>
        <View style={[styles.tapChild, styles.tapPosition]} />
        <Pressable
          style={[styles.arrow21, styles.arrow21Layout]}
          onPress={() => navigation.goBack()}
        >
          <Image
            style={[styles.icon, styles.iconLayout]}
            resizeMode="cover"
            source={require("../assets/arrow-2-11.png")}
          />
        </Pressable>
        <Text style={[styles.notifications2, styles.pastNoticesTypo]}>
          Notifications
        </Text>
      </View>
      <VisitCompletedSection timeAgo="14 mins ago" />
      <VisitCompletedSection
        timeAgo="2 week ago"
        propTop={371}
        propBackgroundColor="unset"
      />
      <OfferSection timeAgo="40 mins ago" />
      <OfferSection
        timeAgo="2 week ago"
        propTop={460}
        propBackgroundColor="unset"
      />
      <Text style={[styles.pastNotices, styles.pastNoticesTypo]}>
        Past notices
      </Text>
    </View>
  );
};

const styles = StyleSheet.create({
  iconLayout: {
    overflow: "hidden",
    width: "100%",
  },
  pastNoticesFlexBox: {
    textAlign: "left",
    lineHeight: 16,
    left: 16,
  },
  tapPosition: {
    height: 88,
    width: 375,
    left: "50%",
    marginLeft: -187.5,
    position: "absolute",
  },
  arrow21Layout: {
    height: 24,
    top: 47,
  },
  pastNoticesTypo: {
    fontWeight: "700",
    fontFamily: FontFamily.dGBaysan,
    position: "absolute",
  },
  navBar: {
    top: 778,
    height: 34,
    width: 375,
    marginLeft: -187.5,
    left: "50%",
    position: "absolute",
  },
  youHave1: {
    color: Color.a6A6A6,
  },
  text: {
    color: Color.colorBlack,
  },
  youHave: {
    fontWeight: "300",
    fontFamily: FontFamily.dGBaysan,
  },
  notifications1: {
    color: Color.praimary,
    fontFamily: FontFamily.dGBaysan,
  },
  youHave2Container: {
    top: 113,
    fontSize: FontSize.size_3xs,
    position: "absolute",
  },
  tapChild: {
    top: 0,
    borderBottomRightRadius: Border.br_mini,
    borderBottomLeftRadius: Border.br_mini,
    backgroundColor: Color.whait,
    shadowColor: "rgba(0, 0, 0, 0.03)",
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowRadius: 20,
    elevation: 20,
    shadowOpacity: 1,
  },
  icon: {
    height: "100%",
  },
  arrow21: {
    right: 335,
    width: 24,
    position: "absolute",
  },
  notifications2: {
    marginLeft: -74.5,
    fontSize: FontSize.size_base,
    lineHeight: 30,
    textAlign: "center",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    width: 150,
    height: 24,
    top: 47,
    color: Color.praimary,
    left: "50%",
    fontWeight: "700",
  },
  tap: {
    top: 1,
  },
  pastNotices: {
    top: 339,
    fontSize: FontSize.size_sm,
    textTransform: "capitalize",
    color: Color.black,
    width: 194,
    height: 16,
    textAlign: "left",
    lineHeight: 16,
    left: 16,
  },
  notifications: {
    backgroundColor: Color.colorGray_100,
    flex: 1,
    height: 812,
  },
});

export default Notifications;

//noti end--
//home 18-3-24--
import React, {useState, useCallback, useEffect} from 'react';
import {
  Text,
  StyleSheet,
  Image,
  View,
  Pressable,
  BackHandler,
  Modal,
  ScrollView,
  Dimensions,
  Button,
  TouchableOpacity,
  FlatList,
  TextInput,
  RefreshControl,
  Alert,
} from 'react-native';
import LinearGradient from 'react-native-linear-gradient';
import ViewDetails6 from './ViewDetails6';
import ViewDetails5 from './ViewDetails5';
import ViewDetails4 from './ViewDetails4';
import {useNavigation} from '@react-navigation/native';
import YearlyServiceSection from './YearlyServiceSection';
import BestOffersSection from './BestOffersSection';
import FormSection from './FormSection';
import Property1Default3 from './Property1Default3';
import Property1Default4 from './Property1Default4';
import SectionMenu from './SectionMenu';
import {Color, FontFamily, FontSize, Border} from '../GlobalStyles';
import DiscountCarousal from '../screens/DiscountCarousal';
import {isEnabled} from 'react-native/Libraries/Performance/Systrace';
import {Badge} from 'react-native-paper';
import messaging from '@react-native-firebase/messaging';
import {post, getWithToken} from '../Utils/WebServer';
import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from 'axios';
import {useSelector} from 'react-redux';
import {selectData} from '../redux/dataSlice';
import {makeApiRequest} from '../Utils/WebServer';
import {useDispatch} from 'react-redux';
import {setData} from '../redux/dataSlice';

{
  /* */
}
const CustomRadioButton = ({options, selectedOption, onSelect}) => {
  const renderItem = ({item}) => (
    <TouchableOpacity
      style={[
        styles.radioButton,
        {
          backgroundColor:
            selectedOption === item.key ? Color.praimary : 'transparent',
        },
        item.key === options.length ? styles.lastRadioButton : null,
      ]}
      onPress={() => onSelect(item.key)}>
      <Text
        style={[
          styles.radioText,
          {color: selectedOption === item.key ? 'white' : Color.praimary},
        ]}>
        {item.text}
      </Text>
    </TouchableOpacity>
  );

  const renderSelectedView = () => {
    const [frameContainer22Visible, setFrameContainer22Visible] =
      useState(false);
    const [frameContainer30Visible, setFrameContainer30Visible] =
      useState(false);
    const [frameContainer38Visible, setFrameContainer38Visible] =
      useState(false);
    const openFrameContainer22 = useCallback(() => {
      setFrameContainer22Visible(true);
    }, []);

    const closeFrameContainer22 = useCallback(() => {
      setFrameContainer22Visible(false);
    }, []);

    const openFrameContainer30 = useCallback(() => {
      setFrameContainer30Visible(true);
    }, []);

    const closeFrameContainer30 = useCallback(() => {
      setFrameContainer30Visible(false);
    }, []);

    const openFrameContainer38 = useCallback(() => {
      setFrameContainer38Visible(true);
    }, []);

    const closeFrameContainer38 = useCallback(() => {
      setFrameContainer38Visible(false);
    }, []);
    const selectedItem = options.find(item => item.key === selectedOption);
    if (!selectedItem) return null;

    switch (selectedItem.key) {
      case 1:
        return (
          <View style={styles.groupContainer}>
            <FormSection
              cleaningServiceImageId={require('../assets/younghousekeeperfemalewithcleaningsupply-1.png')}
              cleaningTypeImageUrl="Regular cleaning"
              cleaningOptionImageId="(2 "
              rating="4.3"
              priceText="79 SAR "
              servicePriceText="100 SAR "
              discountPercentage="off 30 %"
              onFramePressablePress={openFrameContainer22}
            />
            {/*toggle btn */}

            {/*toggle btn */}
            <FormSection
              cleaningServiceImageId={require('../assets/younghousekeeperfemalewithcleaningsupply-11.png')}
              cleaningTypeImageUrl="deep cleaning"
              cleaningOptionImageId="(4 "
              rating="4.6"
              priceText="240 SAR "
              servicePriceText="300 SAR "
              discountPercentage="off 20 %"
              propMarginTop={16}
              propLeft={291}
              onFramePressablePress={openFrameContainer30}
            />
            <FormSection
              cleaningServiceImageId={require('../assets/younghousekeeperfemalewithcleaningsupply-12.png')}
              cleaningTypeImageUrl="Facade cleaning"
              cleaningOptionImageId="(4 "
              rating="4.8"
              priceText="700 SAR "
              servicePriceText="900 SAR "
              discountPercentage="off 15 %"
              propMarginTop={16}
              propLeft={295}
              onFramePressablePress={openFrameContainer38}
            />
          </View>
        );
      case 2:
        return (
          <View style={styles.view}>
            <Text>Hospitality</Text>
          </View>
        );
      case 3:
        return (
          <View style={styles.view}>
            <Text>Maintenance</Text>
          </View>
        );
      case 4:
        return (
          <View style={styles.view}>
            <Text>Electrical Works</Text>
          </View>
        );
      case 5:
        return (
          <View style={styles.view}>
            <Text>Sanitary &Plumbing</Text>
          </View>
        );
      case 6:
        return (
          <View style={styles.view}>
            <Text>HVAC</Text>
          </View>
        );
      case 7:
        return (
          <View style={styles.view}>
            <Text>Pest Control</Text>
          </View>
        );
      case 8:
        return (
          <View style={styles.view}>
            <Text>Landscape</Text>
          </View>
        );
      case 9:
        return (
          <View style={styles.view}>
            <Text>Carpentry</Text>
          </View>
        );
      default:
        return null;
    }
  };

  return (
    <>
      <FlatList
        data={options}
        renderItem={renderItem}
        keyExtractor={item => item.key.toString()}
        horizontal={true}
        showsHorizontalScrollIndicator={false}
      />
      {renderSelectedView()}
    </>
  );
};

// Example usage:
const options = [
  {key: 1, text: 'Cleaning'},
  {key: 2, text: 'Hospitality'},
  {key: 3, text: 'Maintenance'},
  {key: 4, text: 'Electrical Works'},
  {key: 5, text: 'Sanitary &Plumbing'},
  {key: 6, text: 'HVAC'},
  {key: 7, text: 'Pest control'},
  {key: 8, text: 'Landscaping'},
  {key: 9, text: 'Carpentry'},
];
{
  /* */
}

const Home = () => {
  useEffect(() => {
    const backAction = () => {
      // Return true to prevent going back
      return true;
    };

    // Add event listener for the hardware back button
    const backHandler = BackHandler.addEventListener(
      'hardwareBackPress',
      backAction,
    );

    // Remove the event listener when the component unmounts
    return () => backHandler.remove();
  }, []);
  //back end--
  const [frameContainer22Visible, setFrameContainer22Visible] = useState(false);
  const [frameContainer30Visible, setFrameContainer30Visible] = useState(false);
  const [frameContainer38Visible, setFrameContainer38Visible] = useState(false);
  const navigation = useNavigation();
  const [selectedOption, setSelectedOption] = useState(options[0].key);

  const handleSelect = optionKey => {
    setSelectedOption(optionKey);
  };

  const openFrameContainer22 = useCallback(() => {
    setFrameContainer22Visible(true);
  }, []);

  const closeFrameContainer22 = useCallback(() => {
    setFrameContainer22Visible(false);
  }, []);

  const openFrameContainer30 = useCallback(() => {
    setFrameContainer30Visible(true);
  }, []);

  const closeFrameContainer30 = useCallback(() => {
    setFrameContainer30Visible(false);
  }, []);

  const openFrameContainer38 = useCallback(() => {
    setFrameContainer38Visible(true);
  }, []);

  const closeFrameContainer38 = useCallback(() => {
    setFrameContainer38Visible(false);
  }, []);

  const [showAdditionalButtons, setShowAdditionalButtons] = useState(false);
  const [showAdditionalButtons2, setShowAdditionalButtons2] = useState(false);
  const [showAdditionalButtons3, setShowAdditionalButtons3] = useState(false);
  const [expanded, setExpanded] = useState(false);
  const [expanded2, setExpanded2] = useState(false);
  const [expanded3, setExpanded3] = useState(false);
  const [notifications, setNotifications] = useState([]);
  const [refreshing, setRefreshing] = useState(false);
  const [headToken, setHeadToken] = useState(null);
  const [dailyDepartments, setDailyDepartments] = useState([]);
  const [monthlyDepartments, setMonthlyDepartments] = useState([]);
  const [yearlyDepartments, setYearlyDepartments] = useState([]);
  const [shouldRefetchData, setShouldRefetchData] = useState(false);

  const naviClean = () => {
    navigation.navigate('OneTimeService');
  };
  const naviHosp = () => {
    navigation.navigate('HospitalityServices');
  };
  const naviPool = () => {
    navigation.navigate('PoolMaintenance');
  };
  const naviElec = () => {
    navigation.navigate('ElectricalWorks');
  };
  const naviSanitary = () => {
    navigation.navigate('SanitaryPlumbing');
  };
  const naviHVAC = () => {
    navigation.navigate('HVAC');
  };
  const naviPest = () => {
    navigation.navigate('PestControl');
  };
  const naviLand = () => {
    navigation.navigate('LANDSCAPING');
  };
  const naviCarp = () => {
    navigation.navigate('CarpentryWork');
  };

  // const handlePress = () => {
  //   setExpanded(!expanded);
  // };
  const fetchData2 = async () => {
    try {
      const url = 'https://hvserp.com/FomMobB2C/api/FomMobB2CService/getDepartmentList';
      const departments = await makeApiRequest(url, headToken, 'GET');

      const daily = [];
      const monthly = [];
      const yearly = [];

      departments.forEach(dept => {
        const timePeriods = dept.serviceTimePeriods.split(',');
        if (timePeriods.includes('Daily')) {
          daily.push(dept);
        }
        if (timePeriods.includes('Monthly')) {
          monthly.push(dept);
        }
        if (timePeriods.includes('Yearly')) {
          yearly.push(dept);
        }
      });

      setDailyDepartments(daily);
      setMonthlyDepartments(monthly);
      setYearlyDepartments(yearly);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  useEffect(() => {
    if (shouldRefetchData) {
      fetchData2();
      setShouldRefetchData(false); // Reset the flag after fetching data
    }
  }, [shouldRefetchData]);


  //console.log(dailyDepartments,"day")
  
   // Trigger the effect when the token changes



   const handlePress = (itemId) => {
    switch (itemId) {
      case 1:
        setExpanded(!expanded);
        console.log("one time");
        setShouldRefetchData(true); // Set the flag to trigger data refetch
        break;
      case 3:
        setExpanded2(!expanded2);
        console.log("month time");
        setShouldRefetchData(true); // Set the flag to trigger data refetch
        break;
      case 4:
        setExpanded3(!expanded3);
        console.log("year time");
        setShouldRefetchData(true); // Set the flag to trigger data refetch
        break;
      default:
        break;
    }
  };
   

  const isExpanded = (itemId) => {
    switch (itemId) {
      case 1:
        return expanded;
      case 3:
        return expanded2;
      case 4:
        return expanded3;
      default:
        return false;
    }
  };
 
  const fetchActivities = async () => {
    try {
      const url = 'https://hvserp.com/FomMobB2C/api/FomMobB2CService/getActivitiesByDepartmentList?deptCode=  Waste Management';
      const activities = await makeApiRequest(url, headToken, 'GET');
     
      

    } catch (error) {
      console.error('Error fetching data:', error);
    }
  }

  
   
      fetchActivities();
   
 

  
  const handleNavigation = (childItemId, parentDataId) => {
    // Implement your navigation logic based on the combination of childItemId and parentDataId
    // You can use a switch statement or an object mapping to define the navigation routes
    console.log()
    switch (`${parentDataId}-${childItemId}`) {
      
      case '1-10':
        // Navigate to screen for parent 1 and child 1
        navigation.navigate('RegularCleaning');
        break;
      case '1-7':
          // Navigate to screen for parent 1 and child 1
        navigation.navigate('Profile');
        break;  
      case '1-5':
          // Navigate to screen for parent 1 and child 1
        navigation.navigate('Menu');
        break;
      case '2-10':
        // Navigate to screen for parent 1 and child 2
        navigation.navigate('Profile');
        break;
      case '2-7':
        // Navigate to screen for parent 2 and child 1
        navigation.navigate('Menu');
        break;
      case '4-7':
          // Navigate to screen for parent 2 and child 1
        navigation.navigate('Bookings');
        break;
      // Add more cases for other combinations
      default:
        // Handle default or invalid combination
        console.log('Invalid combination');
    }
  };
  
  
  
  
  
  const handlePress2 = () => {
    setExpanded2(!expanded2);
  };

  const handlePress3 = () => {
    setExpanded3(!expanded3);
  };

  const toggleButtons = () => {
    setShowAdditionalButtons(!showAdditionalButtons);
  };
  const toggleButtons2 = () => {
    setShowAdditionalButtons2(!showAdditionalButtons2);
  };
  const toggleButtons3 = () => {
    setShowAdditionalButtons3(!showAdditionalButtons3);
  };

  const handleSelection = option => {
    // Handle selection logic here
    console.log('Selected:', option);
    // Minimize additional buttons after selection
    setShowAdditionalButtons(false);
  };

  const handleSelection2 = option => {
    // Handle selection logic here
    console.log('Selected:', option);
    // Minimize additional buttons after selection
    setShowAdditionalButtons2(false);
  };
  const handleSelection3 = option => {
    // Handle selection logic here
    console.log('Selected:', option);
    // Minimize additional buttons after selection
    setShowAdditionalButtons3(false);
  };
  const windowHeight = Dimensions.get('window').height;
  const windowWidth = Dimensions.get('window').width;
  let additionalButtonsHeight = 0;
  let additionalButtonsHeight2 = 0;
  let additionalButtonsHeight3 = 0;
  if (expanded) {
    // Calculate additional buttons height based on number of buttons and their styling
    additionalButtonsHeight = 326; // Change this value based on your actual requirements
  }
  if (expanded2) {
    // Calculate additional buttons height based on number of buttons and their styling
    additionalButtonsHeight2 = 71; // Change this value based on your actual requirements
  }
  if (expanded3) {
    // Calculate additional buttons height based on number of buttons and their styling
    additionalButtonsHeight3 = 71; // Change this value based on your actual requirements
  }
  const totalHeight =
    windowHeight +
    additionalButtonsHeight +
    additionalButtonsHeight2 +
    additionalButtonsHeight3;

  //push noti counter--
  const [notificationCount, setNotificationCount] = useState(0);
  const [tokenHeader, setTokenHeader] = useState(null);
  const check = async () => {
    const fcmToken = await messaging().getToken();
    //console.log(fcmToken);
  };
  check();
  useEffect(() => {
    // Request permission for receiving notifications (optional)
    messaging().requestPermission();

    // Get initial notification count when app is opened
    messaging()
      .getInitialNotification()
      .then(notification => {
        if (notification) {
          setNotificationCount(notificationCount + 1);
        }
      });

    // Register listener for receiving messages while the app is in foreground
    const unsubscribe = messaging().onMessage(async remoteMessage => {
      setNotificationCount(notificationCount + 1);
    });

    // Register background message handler for receiving messages while the app is in background or terminated
    messaging().setBackgroundMessageHandler(async remoteMessage => {
      setNotificationCount(notificationCount + 1);
    });

    return unsubscribe;
  }, []);
  //push test 2---
  // useEffect(() => {
  //   // Subscribe to FCM messages
  //   const unsubscribe = messaging().onMessage(async (remoteMessage) => {
  //     // Process the received notification
  //     const notification = {
  //       id: remoteMessage.messageId,
  //       title: remoteMessage.notification.title,
  //       body: remoteMessage.notification.body,
  //       image: require('../assets/profmLogoApp.jpeg'), // Android image URL
  //       // image: remoteMessage.notification.apple.imageUrl, // iOS image URL (if applicable)
  //       timestamp: Date.now(), // Add timestamp when the notification was received
  //     };

  //     // Add the notification to the list
  //     setNotifications((prevNotifications) => [...prevNotifications, notification]);
  //   });

  //   // Cleanup function
  //   return () => unsubscribe();
  // }, []);
  //push noti counter end--

  //call item api 3--
  const [token, setToken] = useState(null);
  useEffect(() => {
    const fetchToken = async () => {
      try {
        const userInfoString = await AsyncStorage.getItem('userInfo');
        if (userInfoString) {
          const userInfo = JSON.parse(userInfoString);
          const {token: userToken} = userInfo;
          setToken(userToken);
          console.log('setting');
        }
      } catch (error) {
        console.error('Error fetching token:', error);
      }
    };

    fetchToken();
  }, []);
 // console.log(token);

  const [dataList, setDataList] = useState([]);
  const [userName1, setUserName1] = useState('');

  useEffect(() => {
    const fetchservices = async () => {
      try {
        const userInfoServices = await AsyncStorage.getItem('dataServices');
        if (userInfoServices) {
          const userInfo = JSON.parse(userInfoServices);

          setDataList(userInfo);
          console.log('setting');
        }
      } catch (error) {
        console.error('Error fetching token:', error);
      }
    };

    // fetchservices();
  }, []);
  const dispatch = useDispatch();

  const hitNotification = async () => {
    try {
      // Get the token from AsyncStorage
      const userInfoString = await AsyncStorage.getItem('userInfo');
      if (!userInfoString) {
        throw new Error('User information not found');
      }
      const userInfo = JSON.parse(userInfoString);
      const token2 = userInfo.token;
      //console.log(token2, 'head');
      setHeadToken(token2);
      // Set the authorization header with the token value
      console.log(userInfo.userName);
      setUserName1(userInfo.userName);

      // Make the GET request with axios including the authorization header

      // Handle response data if needed
    } catch (error) {
      console.error('Error:', error);
      // Handle errors here
    }
  };

  useEffect(() => {
    hitNotification();
  }, []);
  //call 3 end
  const fetchData = () => {
    // Simulate fetching data from an API
    setTimeout(() => {
      //setData([1, 2, 3, 4, 5]);
      //3 item start--

      // Example usage:
      const url =
        'https://hvserp.com/FomMobB2C/api/ServicePeriods/getAllActiveFomServicePeriodsForB2C';
      const token = headToken; // Replace with the actual token
      const method = 'GET'; // Specify the HTTP method (GET, POST, etc.)

      // Call the function
      makeApiRequest(url, token, method)
        .then(data => {
          // Dispatch action to store the data in Redux
          dispatch(setData(data));
          // AsyncStorage.setItem('dataServices', JSON.stringify(data));
          // Update state or do other operations with the response data
        })
        .catch(error => {
          // Handle errors
          console.error('Error:', error);
        });

      //3 item end---

      setRefreshing(false);
    }, 2000);
  };

  const dataServices = useSelector(selectData);
 // console.log(dataServices, 'data from redux');
  const onRefresh = () => {
    setRefreshing(true);
    fetchData();
  };

  return (
    <>
      <ScrollView
        contentContainerStyle={{flexGrow: 1}}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            colors={['#006daa', '#80ccef']}
            // Android offset for RefreshControl
            progressViewOffset={100}
          />
        }>
        <View
          style={[
            styles.home,
            {height: totalHeight + 510, width: windowWidth},
          ]}>
          <View style={styles.khaledAlQahtaniParent}>
            <Text style={[styles.khaledAlQahtani, styles.servicesTypo]}>
              Khaled Al Qahtani
            </Text>
            <View style={styles.groupParent}>
              <Image
                style={styles.groupIcon}
                resizeMode="cover"
                source={require('../assets/group13.png')}
              />
              <Text style={styles.alRawdahDistrict}>
                Al Rawdah district , Jeddah
              </Text>
            </View>
          </View>

          <TouchableOpacity
            style={[
              styles.frame,
              {position: 'absolute', top: 78, right: '4%', zIndex: 10},
            ]}
            onPress={() => {
              //  navigation.navigate('Forget')
              // navigation.navigate("NotificationScreen");
              navigation.navigate('Notifications');
            }}>
            <View style={{top: 6}}>
              <Badge visible={notificationCount > 0} size={15}>
                {notificationCount}
              </Badge>
            </View>
            <Image
              style={styles.icon}
              resizeMode="cover"
              source={require('../assets/notificationIcon1.png')}
            />
          </TouchableOpacity>
          <Text style={[styles.services, {top: 375}, styles.servicesTypo]}>
            Services
          </Text>
          {/* <View style={[styles.homeChild, styles.homeChildPosition]} /> */}
          <Image
            style={[styles.profmLogo1112, {position: 'absolute', left: '35%'}]}
            resizeMode="cover"
            source={require('../assets/3-1-1.png')}
          />

          <View
            style={[styles.frameParent, styles.homeChildPosition, {top: 400,zIndex:1}]}>
           
           
           <FlatList
  data={dataServices}
  renderItem={({ item }) => (
    <View>
      {/* Content of each item */}
      <TouchableOpacity
        style={[styles.property1oneTimeService]}
        onPress={() => handlePress(item.id)}>
        <View style={styles.property1oneTimeServiceChild} />
        <View style={styles.oneTimeServiceParent}>
          <Text style={[styles.oneTimeService, styles.oneTypo]}>
            {item.title}
          </Text>
          <Text
            style={[styles.oneTimeHourlyReservation, styles.oneTypo]}>
            {item.descriptions}
          </Text>
        </View>

        <Image
          style={styles.property1oneTimeServiceItem}
          resizeMode="cover"
          source={{ uri: item.imagePath }}
        />
        <TouchableOpacity
          style={styles.groupIconN}
          onPress={() => handlePress(item.id)}>
          <Image
            resizeMode="cover"
            source={
              isExpanded(item.id)
                ? require('../assets/group1Flip.png')
                : require('../assets/group1.png')
            }
          />
        </TouchableOpacity>
      </TouchableOpacity>

      {/* Additional elements to be shown when expanded is true */}
      {isExpanded(item.id) && (
        <FlatList
          data={item.id === 1 ? dailyDepartments : item.id === 3 ? monthlyDepartments : yearlyDepartments}
          renderItem={({ item: childItem }) => (
            <View style={{ flexDirection: "column", flex: 1 }}>
              <TouchableOpacity  onPress={() => handleNavigation(childItem.id, item.id)}>
                <View style={styles.customView2}>
                  <Image
                    source={childItem.imageSource}
                    style={styles.imageD}
                  />
                  <Text style={styles.textD}>{childItem.nameEng} </Text>
                </View>
              </TouchableOpacity>
            </View>
          )}
          keyExtractor={(item) => item.id.toString()}
          numColumns={2}
          parentData={item} // Pass the parent data to the child FlatList
        />
      )}
    </View>
  )}
  keyExtractor={(item, index) => index.toString()}
/>

            
            {/*   */}
            {/* <YearlyServiceSection /> */}
            {/*3 items start */}

            {/*  <Pressable
      style={[styles.property1oneTimeService, ]}
      onPress={handlePress}
    >
      <View style={styles.property1oneTimeServiceChild} />
      <View style={styles.oneTimeServiceParent}>
        <Text style={[styles.oneTimeService, styles.oneTypo]}>
          One Time Service
        </Text>
        <Text
          style={[
            styles.oneTimeHourlyReservation,
            styles.oneTypo,
            
          ]}
        >
          One time hourly reservation service
        </Text>
      </View>
      
      <Image
        style={styles.property1oneTimeServiceItem}
        resizeMode="cover"
        source={require("../assets/rectangle-4369.png")}
      />
      <TouchableOpacity  style={styles.groupIconN} onPress={handlePress}>
      <Image
       
        resizeMode="cover"
        source={expanded ? require("../assets/group1Flip.png") : require("../assets/group1.png")}
      />
      </TouchableOpacity>
     
    </Pressable>
    <View style={styles.container}>
     
    {expanded && (
      <View style={{
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row',
    flexWrap: 'wrap',
   left:"-4%",
   marginTop:5
  }}>
  <TouchableOpacity onPress={naviClean}>
      <View style={styles.customView}>
        <Image
          source={require('../assets/cleanimage.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Cleaning service</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity onPress={naviHosp}>
      <View style={styles.customView}>
        <Image
          source={require('../assets/hospitality.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Hospitality</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity onPress={naviPool}>
      <View style={styles.customView}>
        <Image
          source={require('../assets/pool.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Pool Maintenance</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity onPress={naviElec}>
      <View style={styles.customView}>
        <Image
          source={require('../assets/electric.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Electrical Works</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity onPress={naviSanitary}>
      <View style={styles.customView}>
        <Image
          source={require('../assets/sanitary.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Sanitary&Plumbing</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity onPress={naviHVAC}>
      <View style={styles.customView}>
        <Image
          source={require('../assets/hvac.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>HVAC</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity onPress={naviPest}>
      <View style={styles.customView}>
        <Image
          source={require('../assets/pest2.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Pest Control</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity onPress={naviLand}>
      <View style={styles.customView}>
        <Image
          source={require('../assets/landscape.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Landscaping</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity onPress={naviCarp}>
      <View style={{backgroundColor: 'white',
    padding: 10,
    marginBottom: 5,
    borderRadius: 5,
    flexDirection: 'row',
    alignItems: 'center',
    borderColor: '#d7e1e5',
    borderWidth: 1,
    width: 163,
    margin:8,
    height:50,
    left:"-28%"}}>
        <Image
          source={require('../assets/carpentry.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Carpentry</Text>
      </View>
      </TouchableOpacity>
      
    </View>
      )}
   </View>
   
    
     <Pressable 
      style={[styles.property1oneTimeService, ]}
      onPress={handlePress2}
    >
      <View style={styles.property1oneTimeServiceChild} />
      <View style={styles.oneTimeServiceParent}>
        <Text style={[styles.oneTimeService, styles.oneTypo]}>
          Monthly Service
        </Text>
        <Text
          style={[
            styles.oneTimeHourlyReservation,
            styles.oneTypo,
            
          ]}
        >
          Periodic service with several visits monthly.
        </Text>
      </View>
      
      <Image
        style={styles.property1oneTimeServiceItem}
        resizeMode="cover"
        source={require("../assets/monthly.png")}
      />
      <TouchableOpacity  style={styles.groupIconN} onPress={handlePress2}>
      <Image
       
        resizeMode="cover"
        source={expanded2 ? require("../assets/group1Flip.png") : require("../assets/group1.png")}
      />
      </TouchableOpacity>
     
     
    </Pressable>
    
    <View >
     
    {expanded2 && (
      <View style={{flex:1,flexDirection:"row",marginTop:10,left:"-4%"}}>
  <TouchableOpacity onPress={naviClean}>
      <View style={styles.customView2}>
        <Image
          source={require('../assets/cleanimage.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Cleaning service</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity onPress={naviHVAC}>
      <View style={styles.customView2}>
        <Image
          source={require('../assets/hvac.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>HVAC</Text>
      </View>
      </TouchableOpacity>
      
      
     
       
      
     
     
    </View>
      )}
   </View>
    

     
      <Pressable

      
      style={[styles.property1oneTimeService, ]}
      onPress={handlePress3}
    >
      <View style={styles.property1oneTimeServiceChild} />
      <View style={styles.oneTimeServiceParent}>
        <Text style={[styles.oneTimeService, styles.oneTypo]}>
         Yearly Service
        </Text>
        <Text
          style={[
            styles.oneTimeHourlyReservation,
            styles.oneTypo,
            
          ]}
        >
          Multi-visit yearly service available through contract
        </Text>
      </View>
      
      <Image
        style={styles.property1oneTimeServiceItem}
        resizeMode="cover"
        source={require("../assets/yearly.png")}
      />
      

      <TouchableOpacity  style={styles.groupIconN} onPress={handlePress3}>
      <Image
       
        resizeMode="cover"
        source={expanded3 ? require("../assets/group1Flip.png") : require("../assets/group1.png")}
      />
      </TouchableOpacity>
     
    </Pressable>
    <View style={styles.container}>
     
    {expanded3 && (
      <View style={{flex:1,flexDirection:"row",marginTop:10,left:"-4%"}}>
  <TouchableOpacity onPress={naviClean}>
      <View style={styles.customView3}>
        <Image
          source={require('../assets/cleanimage.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>Cleaning service</Text>
      </View>
      </TouchableOpacity>
      <TouchableOpacity onPress={naviHVAC}>
      <View style={styles.customView3}>
        <Image
          source={require('../assets/hvac.png')}
          style={styles.imageD}
        />
        <Text style={styles.textD}>HVAC</Text>
      </View>
      </TouchableOpacity>
      
      
     
       
      
     
     
    </View>
      )}
   </View>
   */}
            {/*3 items start end*/}

            {/* <YearlyServiceSection /> */}
            <View style={{top: '2%', width: 360}}>
              <Text
                style={{
                  color: 'black',
                  fontWeight: 'bold',
                  padding: 5,
                  left: '0%',
                }}>
                Best Offers
              </Text>
              {options.length > 0 && (
                <CustomRadioButton
                  options={options}
                  selectedOption={selectedOption}
                  onSelect={handleSelect}
                />
              )}
            </View>
            {/* <BestOffersSection /> */}
            <Modal
              animationType="fade"
              transparent
              visible={frameContainer22Visible}>
              <View style={styles.frameContainer22Overlay}>
                <Pressable
                  style={styles.frameContainer22Bg}
                  onPress={closeFrameContainer22}
                />
                <ViewDetails6 onClose={closeFrameContainer22} />
              </View>
            </Modal>

            <Modal
              animationType="fade"
              transparent
              visible={frameContainer30Visible}>
              <View style={styles.frameContainer30Overlay}>
                <Pressable
                  style={styles.frameContainer30Bg}
                  onPress={closeFrameContainer30}
                />
                <ViewDetails5 onClose={closeFrameContainer30} />
              </View>
            </Modal>

            <Modal
              animationType="fade"
              transparent
              visible={frameContainer38Visible}>
              <View style={styles.frameContainer38Overlay}>
                <Pressable
                  style={styles.frameContainer38Bg}
                  onPress={closeFrameContainer38}
                />
                <ViewDetails4 onClose={closeFrameContainer38} />
              </View>
            </Modal>
          </View>
          {/* <Property1Default3
          fiRrZoomOut={require("../assets/firrzoomout.png")}
          property1DefaultPosition="absolute"
          property1DefaultMarginLeft={"0%"}
          property1DefaultTop={140}
          property1DefaultLeft="2%"
        /> */}

          <View style={{top: 130}}>
            <View style={styles.rectangleParent}>
              <View style={styles.frameShadowBox} />
              <View style={[styles.frameGroup, styles.frameGroupPosition]}>
                <View style={styles.lockParent}>
                  <Image
                    style={styles.iconLayout}
                    resizeMode="cover"
                    source={require('../assets/firrzoomout.png')}
                  />
                  <TextInput
                    placeholder="Search"
                    placeholderTextColor="#D3D3D3"
                    maxLength={40}
                    style={{color: '#006daa', padding: 10, marginTop: '2%'}}
                  />
                </View>
              </View>
            </View>
          </View>
          {/* <Property1Default4 /> */}
          <DiscountCarousal />
        </View>

        {/* <Modal animationType="fade" transparent visible={frameContainer22Visible}>
        <View style={styles.frameContainer22Overlay}>
          <Pressable
            style={styles.frameContainer22Bg}
            onPress={closeFrameContainer22}
          />
          <ViewDetails6 onClose={closeFrameContainer22} />
        </View>
      </Modal>

      <Modal animationType="fade" transparent visible={frameContainer30Visible}>
        <View style={styles.frameContainer30Overlay}>
          <Pressable
            style={styles.frameContainer30Bg}
            onPress={closeFrameContainer30}
          />
          <ViewDetails5 onClose={closeFrameContainer30} />
        </View>
      </Modal>

      <Modal animationType="fade" transparent visible={frameContainer38Visible}>
        <View style={styles.frameContainer38Overlay}>
          <Pressable
            style={styles.frameContainer38Bg}
            onPress={closeFrameContainer38}
          />
          <ViewDetails4 onClose={closeFrameContainer38} />
        </View>
      </Modal> */}
      </ScrollView>
    </>
  );
};

const styles = StyleSheet.create({
  servicesTypo: {
    textAlign: 'left',
    color: Color.colorBlack,
    textTransform: 'capitalize',
    fontFamily: FontFamily.dGBaysan,
  },
  iconLayout: {
    height: 18,
    width: 18,
  },
  lockParent: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  frameGroupPosition: {
    zIndex: 1,
    left: 12,
    flexDirection: 'row',
    position: 'absolute',
  },
  frameShadowBox: {
    zIndex: 0,
    height: 48,
    width: '96%',
    borderWidth: 0.3,
    borderColor: Color.a6A6A6,
    borderStyle: 'solid',
    shadowOpacity: 1,
    elevation: 20,
    shadowRadius: 20,
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowColor: 'rgba(0, 0, 0, 0.03)',
    backgroundColor: Color.whait,
    borderRadius: Border.br_5xs,
    left: '2%',
  },
  frameGroup: {
    top: 3,
    zIndex: 1,
    left: 12,
  },

  imageD: {
    width: 20,
    height: 20,
    marginRight: 10,
  },
  customView2: {
    width: 155, // Two views per row
    backgroundColor: 'white',
    marginBottom: 5,
    borderRadius: 5,
    flexDirection: 'row',
    alignItems: 'center',
    borderColor: '#d7e1e5',
    borderWidth: 1,
    marginTop:8,
    marginLeft:0,
    height: 50,
    alignSelf:"flex-start"
    
  },
  customView3: {
    width: 163, // Two views per row
    backgroundColor: 'white',
    padding: 10,
    marginBottom: 5,
    borderRadius: 5,
    flexDirection: 'row',
    alignItems: 'center',
    borderColor: '#d7e1e5',
    borderWidth: 1,
    margin: 5,
    height: 50,
  },
  textD: {
    fontSize: 12.5,
    color: 'black',
  },
  customView: {
    backgroundColor: 'white',
    padding: 10,
    marginBottom: 5,
    borderRadius: 5,
    flexDirection: 'row',
    alignItems: 'center',
    borderColor: '#d7e1e5',
    borderWidth: 1,
    width: 163,
    margin: 8,
    height: 50, // Two views per row
  },

  radioButton: {
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 20,
    borderWidth: 2,
    borderColor: Color.praimary,
    marginHorizontal: 5,
  },
  lastRadioButton: {
    borderRightWidth: 0,
  },
  radioText: {
    fontSize: 16,
  },
  homeChildPosition: {
    position: 'absolute',
    alignSelf:"center",
    left:"4%",
    right:"0%"
  },
  oneTypo: {
    textAlign: 'left',
    fontFamily: FontFamily.dGBaysan,
  },
  property1oneTimeServiceChild: {
    height: '100%',
    width: '100%',
    top: '0%',
    right: '0%',
    bottom: '0%',
    left: '0%',
    borderRadius: Border.br_5xs,
    backgroundColor: Color.colorAliceblue_200,
    borderStyle: 'solid',
    borderColor: Color.praimary,
    borderWidth: 0.5,
    position: 'absolute',
  },
  oneTimeService: {
    fontSize: FontSize.size_sm,
    textTransform: 'capitalize',
    fontWeight: '600',
    color: Color.praimary,
    display: 'flex',
    alignItems: 'center',
    width: 120,
    height: 16,
  },
  oneTimeHourlyReservation: {
    fontSize: FontSize.med_size,
    lineHeight: 18,
    fontWeight: '300',
    color: Color.grayBlack,
    width: 184,
    height: 34,
    marginTop: 4,
  },
  oneTimeServiceParent: {
    top: 16,
    left: 16,
    position: 'absolute',
  },
  property1oneTimeServiceItem: {
    top: 0,
    left: '62%',
    borderTopRightRadius: Border.br_5xs,
    borderBottomRightRadius: Border.br_5xs,
    width: 130,
    position: 'absolute',
    height: 86,
  },
  groupIconN: {
    height: '8.14%',
    marginLeft: -5.5,
    top: '82.56%',
    bottom: '9.3%',
    left: '50%',
    maxHeight: '100%',
    width: '10%',
    position: 'absolute',
  },
  property1oneTimeService: {
    shadowColor: 'rgba(0, 0, 0, 0.05)',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowRadius: 15,
    elevation: 15,
    shadowOpacity: 1,
    width: '94%',
    height: 86,
    marginTop: 10,
    zIndex:1
    
  },
  frameContainer22Overlay: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'rgba(113, 113, 113, 0.3)',
  },
  frameContainer22Bg: {
    position: 'absolute',
    width: '100%',
    height: '100%',
    left: 0,
    top: 0,
  },
  frameContainer30Overlay: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'rgba(113, 113, 113, 0.3)',
  },
  frameContainer30Bg: {
    position: 'absolute',
    width: '100%',
    height: '100%',
    left: 0,
    top: 0,
  },
  frameContainer38Overlay: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'rgba(113, 113, 113, 0.3)',
  },
  frameContainer38Bg: {
    position: 'absolute',
    width: '100%',
    height: '100%',
    left: 0,
    top: 0,
  },
  khaledAlQahtani: {
    fontSize: FontSize.size_sm,
    width: 130,
    fontWeight: '300',
    color: Color.colorBlack,
    textTransform: 'capitalize',
  },
  groupIcon: {
    width: 10,
    height: 14,
  },
  alRawdahDistrict: {
    fontSize: FontSize.med_size,
    color: Color.grayBlack,
    textAlign: 'center',
    marginLeft: '2%',
    fontFamily: FontFamily.dGBaysan,
    fontWeight: '300',
  },
  groupParent: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginTop: 4,
    alignItems: 'center',
    height: 14,
  },
  khaledAlQahtaniParent: {
    top: 74,
    height: 37,
    left: '4%',
    position: 'absolute',
  },
  icon: {
    width: '100%',
    height: '100%',
    overflow: 'hidden',
  },
  frame: {
    right: '10%',
    top: 38,
    width: 24,
    height: 24,
    position: 'absolute',
  },
  services: {
    fontSize: FontSize.size_base,
    fontWeight: '600',
    display: 'flex',
    width: 68,
    height: 18,
    alignItems: 'center',
    color: Color.colorBlack,
    textTransform: 'capitalize',
    left: '4%',
    position: 'absolute',
  },
  homeChild: {
    marginLeft: -174.5,
    top: 905,
    width: 349,
    height: 97,
    overflow: 'hidden',
  },
  profmLogo1112: {
    marginLeft: '0%',
    top: 25,
    width: 110,
    height: 45.5,
  },
  groupContainer: {
    marginTop: 24,
  },

  home: {
    backgroundColor: Color.colorGray_100,
  },
});

export default Home;

//home end---
//RegularCleaning 19-3-24--
import React, {useState, useCallback, useEffect} from 'react';
import {
  StyleSheet,
  View,
  Text,
  Image,
  Pressable,
  Modal,
  ScrollView,
  TouchableOpacity,
  Dimensions,
  FlatList
} from 'react-native';
import {useNavigation} from '@react-navigation/native';
import RegularCleaning9 from '../components/RegularCleaning';
import {Color, FontSize, FontFamily, Padding, Border} from '../GlobalStyles';

const windowHeight = Dimensions.get('window').height;
  const windowWidth = Dimensions.get('window').width;

const RegularCleaning = ({ route }) => {
  const [frameContainer12Visible, setFrameContainer12Visible] = useState(false);
  const navigation = useNavigation();
  const { activities, deptCode } = route.params;
  const openFrameContainer12 = useCallback(() => {
    setFrameContainer12Visible(true);
  }, []);

  const closeFrameContainer12 = useCallback(() => {
    setFrameContainer12Visible(false);
  }, []);

  useEffect(() => {
    // Fetch activities based on deptCode
    // For demonstration, just log activities and deptCode
    console.log("Activities:", activities);
    console.log("Department Code:", deptCode);

    // Assume fetching is completed
   
}, []);

const renderItem = ({ item }) => (
  <View style={{ padding: 10 }}>
      <Text>{item.actName}</Text>
  </View>
);

  return (
    <>
      <ScrollView>
        <View style={[styles.regularCleaning,{height:windowHeight,width:windowWidth}]}>
          <View style={styles.frameParent}>
            <View>
           
            <TouchableOpacity style={styles.componentLayout}>
                <View style={styles.component10Child} />
                <Text
                  style={[styles.regularCleaning1, styles.serviceTransform]}>
                  Regular cleaning
                </Text>
                <Image
                  style={styles.component10Item}
                  resizeMode="cover"
                  source={require('../assets/rectangle-4381.png')}
                />
                <Image
                  style={[styles.groupIcon, styles.iconPosition]}
                  resizeMode="cover"
                  source={require('../assets/group1.png')}
                />
              </TouchableOpacity>
              <TouchableOpacity style={[styles.component11, styles.componentLayout]}>
                <View style={styles.component10Child} />
                <Text
                  style={[styles.regularCleaning1, styles.serviceTransform]}>
                  deep cleaning
                </Text>
                <Image
                  style={styles.component10Item}
                  resizeMode="cover"
                  source={require('../assets/rectangle-43811.png')}
                />
                <Image
                  style={[styles.groupIcon, styles.iconPosition]}
                  resizeMode="cover"
                  source={require('../assets/group1.png')}
                />
              </TouchableOpacity>
              <TouchableOpacity style={[styles.component11, styles.componentLayout]}>
                <View style={styles.component10Child} />
                <Text
                  style={[styles.regularCleaning1, styles.serviceTransform]}>
                  Facade cleaning
                </Text>
                <Image
                  style={styles.component10Item}
                  resizeMode="cover"
                  source={require('../assets/rectangle-43812.png')}
                />
                <Image
                  style={[styles.vectorIcon, styles.vectorIconPosition]}
                  resizeMode="cover"
                  source={require('../assets/group1.png')}
                />
              </TouchableOpacity>
            </View>
            <View style={styles.frameChild} />
          </View>
          <View
            style={[
              styles.profmProvidesAWideRangeOfParent,
              styles.regularCleaningChildPosition,
            ]}>
            <Text
              style={[
                styles.profmProvidesAContainer,
                styles.serviceDetailsTypo,
              ]}>
              <Text style={styles.profmProvidesAWideRangeOf}>
                <Text style={styles.profm}>Profm</Text>
                {` provides a wide range of cleaning services for homes, businesses, and public facilities.

`}
              </Text>
              <Text style={styles.blankLine}> </Text>
            </Text>
            <Text
              style={[styles.cleaningService, styles.cleaningServicePosition]}>
              {deptCode}
            </Text>
            <Pressable
              style={[styles.frameGroup, styles.vectorIconPosition2]}
              onPress={() => navigation.navigate('ServiceDetails96')}>
              <View style={styles.frameContainer}>
                <Image
                  style={styles.frameIcon}
                  resizeMode="cover"
                  source={require('../assets/frame18.png')}
                />
                <Text
                  style={[styles.serviceDetails, styles.serviceDetailsTypo]}>
                  Service details
                </Text>
              </View>
              <Image
                style={styles.vectorIcon1}
                resizeMode="cover"
                source={require('../assets/group6.png')}
              />
            </Pressable>
          </View>



          <Image
            style={[
              styles.regularCleaningChild,
              styles.regularCleaningChildPosition,
            ]}
            resizeMode="cover"
            source={require('../assets/group-239088@3x_cleanup.png')}
          />
          <View style={{flex:1,flexDirection:"row",top:"10%"}}>
          <TouchableOpacity style={[styles.frameIcon2,{left:"3%"}]} onPress={() => navigation.goBack()} >
           <Image
                  
                  resizeMode="cover"
                  source={require('../assets/group-2387371.png')}
                />
                </TouchableOpacity>

<TouchableOpacity style={[styles.frameIcon2,{right:"-39%"}]}>
<Image
                  
                  resizeMode="cover"
                  source={require('../assets/group-2387381.png')}
                /></TouchableOpacity>
                </View>




          <View style={[styles.navBar, styles.navPosition]}>
            <View style={[styles.navBar1, styles.navFlexBox]}>
              <Pressable
                style={[styles.navBarInner, styles.navFlexBox]}
                onPress={() => navigation.navigate('Bottom', {screen: 'Home'})}>
                <View style={styles.parentSpaceBlock}>
                  <Image
                    style={styles.home2Icon}
                    resizeMode="cover"
                    source={require('../assets/home23.png')}
                  />
                  <Text style={[styles.home, styles.homeTypo]}>Home</Text>
                </View>
              </Pressable>
              <View style={[styles.navBarChild, styles.navBarChildLayout]}>
                <View style={styles.navFlexBox}>
                  <Image
                    style={styles.home2Icon}
                    resizeMode="cover"
                    source={require('../assets/clock3.png')}
                  />
                  <Text style={[styles.history, styles.homeTypo]}>History</Text>
                </View>
              </View>
              <Pressable
                style={styles.navBarChildLayout}
                onPress={() => navigation.navigate('Bottom', {screen: 'Bookings'})}>
                <View style={styles.calendarTickParent}>
                  <Image
                    style={styles.home2Icon}
                    resizeMode="cover"
                    source={require('../assets/calendartick4.png')}
                  />
                  <Text style={[styles.bookings, styles.homeTypo]}>
                    bookings
                  </Text>
                </View>
              </Pressable>
              <Pressable
                style={styles.navBarChildLayout}
                onPress={() => navigation.navigate('Bottom', {screen: 'Profile'})}>
                <View style={styles.navFlexBox}>
                  <Image
                    style={styles.home2Icon}
                    resizeMode="cover"
                    source={require('../assets/vuesaxlinearuser.png')}
                  />
                  <Text style={[styles.bookings, styles.homeTypo]}>
                    account
                  </Text>
                </View>
              </Pressable>
              <Pressable
                style={styles.navBarChildLayout}
                onPress={() => navigation.navigate('Bottom', {screen: 'Menu'})}>
                <View
                  style={[styles.textalignLeftParent, styles.parentSpaceBlock]}>
                  <Image
                    style={styles.home2Icon}
                    resizeMode="cover"
                    source={require('../assets/textalignleft.png')}
                  />
                  <Text style={[styles.home, styles.homeTypo]}>Menu</Text>
                </View>
              </Pressable>
            </View>
            
          </View>
        </View>

        <Modal
          animationType="fade"
          transparent
          visible={frameContainer12Visible}>
          <View style={styles.frameContainer12Overlay}>
            <Pressable
              style={styles.frameContainer12Bg}
              onPress={closeFrameContainer12}
            />
            <RegularCleaning9 onClose={closeFrameContainer12} />
          </View>
        </Modal>
      </ScrollView>
    </>
  );
};

const styles = StyleSheet.create({
  serviceTransform: {
    display: 'flex',
    textTransform: 'capitalize',
    alignItems: 'center',
  },
  iconPosition: {
    bottom: '11.11%',
    top: '79.17%',
    height: '9.72%',
    maxHeight: '100%',
  },
  componentLayout: {
    height: 72,
    width: "100%",
  },
  vectorIconPosition: {
    left: '50%',
    position: 'absolute',
  },
  vectorIconPosition2: {
    left: '2%',
    position: 'absolute',
  },
  regularCleaningChildPosition: {
    width: "100%",
    left: 0,
    position: 'absolute',
  },
  serviceDetailsTypo: {
    color: Color.grayBlack,
    fontSize: FontSize.med_size,
    fontWeight: '300',
    textAlign: 'left',
    fontFamily: FontFamily.dGBaysan,
  },
  cleaningServicePosition: {
    left: "4%",
    position: 'absolute',
  },
  navPosition: {
    left: '0%',
    width: "100%",
    position: 'absolute',
  },
  navFlexBox: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  homeTypo: {
    marginTop: 4,
    color: "gray",
    lineHeight: 16,
    fontSize: FontSize.med_size,
    textAlign: 'left',
  },
  navBarChildLayout: {
    width: 94,
    justifyContent: 'center',
    height: 56,
    alignItems: 'center',
  },
  parentSpaceBlock: {
    paddingVertical: Padding.p_8xs,
    paddingHorizontal: 0,
    justifyContent: 'center',
    alignItems: 'center',
  },
  component10Child: {
    left: '0%',
    backgroundColor: Color.colorAliceblue_200,
    bottom: '0%',
    right: '0%',
    top: '0%',
    height: '100%',
    position: 'absolute',
    width: '100%',
  },
  regularCleaning1: {
    height: '60%',
    width: '30.87%',
    top: '20%',
    left: '4.27%',
    fontSize: FontSize.size_sm,
    color: Color.praimary,
    textAlign: 'left',
    fontFamily: FontFamily.dGBaysan,
    display: 'flex',
    position: 'absolute',
  },
  component10Item: {
    width: '49.87%',
    left: '50.13%',
    maxHeight: '100%',
    overflow: 'hidden',
    maxWidth: '100%',
    bottom: '0%',
    right: '0%',
    top: '0%',
    height: '100%',
    position: 'absolute',
  },
  groupIcon: {
    width: '3.2%',
    right: '48.27%',
    left: '48.53%',
    overflow: 'hidden',
    maxWidth: '100%',
    bottom: '11.11%',
    top: '79.17%',
    height: '9.72%',
    position: 'absolute',
  },
  component11: {
    marginTop: 14,
  },
  vectorIcon: {
    marginLeft: -5.5,
    width: 12,
    bottom: '11.11%',
    top: '79.17%',
    height: '9.72%',
    maxHeight: '100%',
  },
  frameChild: {
    width: 343,
    height: 49,
    marginTop: 65,
    overflow: 'hidden',
  },
  frameParent: {
    top: "55%",
    alignItems: 'center',
    position: 'absolute',
    left:"-45%"
  },
  profm: {
    textTransform: 'uppercase',
  },
  profmProvidesAWideRangeOf: {
    lineHeight: 16,
  },
  blankLine: {
    lineHeight: 15,
  },
  profmProvidesAContainer: {
    width: "95%",
    height: 32,
    left: "4%",
    position: 'absolute',
    top: "30%",
  },
  cleaningService: {
    top: "12%",
    fontSize: FontSize.size_base,
    fontWeight: '600',
    color: Color.black,
    width: "100%",
    height: 24,
    display: 'flex',
    textTransform: 'capitalize',
    alignItems: 'center',
    textAlign: 'left',
    fontFamily: FontFamily.dGBaysan,
  },
  frameIcon: {
    width: 14,
    height: 14,
    overflow: 'hidden',
  },
  frameIcon2: {
    width: 29,
    height: 29,
    overflow: 'hidden',
  },
  serviceDetails: {
    width: 120,
    height: 16,
    marginLeft: 8,
    display: 'flex',
    textTransform: 'capitalize',
    alignItems: 'center',
  },
  frameContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  vectorIcon1: {
    width: 7,
    height: 12,
    marginLeft: "50%",
  },
  frameGroup: {
    top: "55%",
    borderRadius: Border.br_5xs,
    backgroundColor:"#d3d3d3",
    padding: Padding.p_xs,
    flexDirection: 'row',
    alignItems: 'center',
  },
  profmProvidesAWideRangeOfParent: {
    top: "30%",
    height: 176,
    backgroundColor: Color.lightBGPrimary,
    overflow: 'hidden',
  },
  regularCleaningChild: {
    height: 208,
    top: 0,
  },
  home2Icon: {
    width: 24,
    height: 24,
  },
  home: {
    fontWeight: '300',
    marginTop: 4,
    color: "gray",
    fontFamily: FontFamily.dGBaysan,
  },
  navBarInner: {
    width: 93,
    height: 56,
    justifyContent: 'center',
  },
  history: {
    fontWeight: '500',
    fontFamily: FontFamily.med,
  },
  navBarChild: {
    display: 'none',
  },
  bookings: {
    fontWeight: '300',
    marginTop: 4,
    color:"gray",
    fontFamily: FontFamily.dGBaysan,
    textTransform: 'capitalize',
  },
  calendarTickParent: {
    alignItems: 'center',
  },
  frameContainer12Overlay: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'rgba(113, 113, 113, 0.3)',
  },
  frameContainer12Bg: {
    position: 'absolute',
    width: '100%',
    height: '100%',
    left: 0,
    top: 0,
  },
  textalignLeftParent: {
    height: 53,
  },
  navBar1: {
    height: 56,
    justifyContent: 'center',
    marginLeft: -187.5,
    left: '50%',
    width: 375,
    position: 'absolute',
    top: 0,
    flexDirection: 'row',
    backgroundColor: Color.lightBGPrimary,
  },
  homeIndicator1: {
    borderRadius: Border.br_81xl,
    backgroundColor: Color.colorGray_200,
    width: 134,
    height: 5,
  },
  homeIndicator: {
    alignSelf: 'stretch',
    justifyContent: 'flex-end',
    paddingVertical: Padding.p_5xs,
    height: 34,
    paddingHorizontal: 0,
    alignItems: 'center',
  },
  webViewbottom: {
    borderBottomRightRadius: Border.br_8xs,
    borderBottomLeftRadius: Border.br_8xs,
    height: 34,
    top: 56,
    backgroundColor: Color.lightBGPrimary,
  },
  navBar: {
    bottom: "-4.5%",
    height: 80,
    zIndex: 1,
    elevation: 1, // Minimum value for visible elevation on Android
    shadowColor: "#808080", // Use hexadecimal or RGB color code for iOS
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  regularCleaning: {
    backgroundColor: Color.colorGray_100,
    flex: 1,
  },
});

export default RegularCleaning;

//regular cleaning end--
//pin your location 26-3-24------
import React, { useState, useRef } from 'react';
import { Text, StyleSheet, Image, View, TouchableWithoutFeedback,TouchableOpacity,SafeAreaView,Dimensions  } from "react-native";
import { FontSize, Color, FontFamily, Border, Padding} from "../GlobalStyles";

import moment from 'moment';
import Swiper from 'react-native-swiper';
import Icon from 'react-native-vector-icons/MaterialIcons';

const SectionForm = () => {



  const { width } = Dimensions.get('window');

  const swiper = useRef();
  const [value, setValue] = useState(new Date());
  const [week, setWeek] = useState(0);

  const weeks = React.useMemo(() => {
    const start = moment().add(week, 'weeks').startOf('week');

    return [-1, 0, 1].map((adj) => {
      return Array.from({ length: 7 }).map((_, index) => {
        const date = moment(start).add(adj, 'week').add(index, 'day');

        return {
          weekday: date.format('ddd'),
          date: date.toDate(),
        };
      });
    });
  }, [week]);

  const currentMonthYear = moment(value).format('MMMM YYYY');

  const handleBackward = () => {
    swiper.current.scrollBy(-1);
  };

  const handleForward = () => {
    swiper.current.scrollBy(1);
  };
  return (
     <SafeAreaView style={{ flex: 1 }}>
    <View>
      <Text style={styles.selectDate}>Select date</Text>
     
      <View style={[styles.frameWrapper, styles.frameWrapperFlexBox]}>
        <View>
          <View style={[styles.january2024Parent, styles.parentFlexBox]}>
            <Text style={styles.january2024}>January 2024</Text>
            <View style={styles.arrowCircleLeftParent}>
              <Image
                style={styles.arrowIconLayout}
                resizeMode="cover"
                source={require("../assets/arrowcircleleft.png")}
              />
              <Image
                style={[styles.arrowCircleRightIcon, styles.arrowIconLayout]}
                resizeMode="cover"
                source={require("../assets/arrowcircleright.png")}
              />
            </View>
          </View>
          <View style={[styles.groupParent, styles.parentFlexBox]}>
            <View style={[styles.parent, styles.groupLayout]}>
              <Text style={[styles.text, styles.textLayout]}>14</Text>
              <Text style={[styles.sun, styles.sunPosition]}>SUN</Text>
            </View>
            <View style={[styles.group, styles.groupLayout]}>
              <Text style={[styles.text, styles.textLayout]}>15</Text>
              <Text style={[styles.sun, styles.sunPosition]}>MON</Text>
            </View>
            <View style={[styles.group, styles.groupLayout]}>
              <Text style={[styles.text, styles.textLayout]}>16</Text>
              <Text style={[styles.sun, styles.sunPosition]}>TUE</Text>
            </View>
            <View style={[styles.rectangleParent, styles.frameWrapperFlexBox]}>
              <View style={styles.frameChild} />
              <View style={[styles.groupView, styles.text6Position]}>
                <Text style={[styles.text3, styles.wedTypo]}>17</Text>
                <Text style={[styles.wed, styles.wedTypo]}>WED</Text>
              </View>
            </View>
            <View style={[styles.group, styles.groupLayout]}>
              <Text style={[styles.text, styles.textLayout]}>18</Text>
              <Text style={[styles.sun, styles.sunPosition]}>THU</Text>
            </View>
            <View style={[styles.group, styles.groupLayout]}>
              <Text style={[styles.text, styles.textLayout]}>19</Text>
              <Text style={[styles.sun, styles.sunPosition]}>FRI</Text>
            </View>
            <View style={[styles.group, styles.groupLayout]}>
              <Text style={[styles.text6, styles.text6Position]}>20</Text>
              <Text style={[styles.sun, styles.sunPosition]}>SAT</Text>
            </View>
          </View>
        </View>
      </View>
    
    </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  frameWrapperFlexBox: {
    justifyContent: "center",
    alignItems: "center",
  },
  parentFlexBox: {
    alignItems: "center",
    flexDirection: "row",
  },
  arrowIconLayout: {
    height: 20,
    width: 20,
  },
  groupLayout: {
    width: 32,
    height: 48,
  },
  textLayout: {
    height: 24,
    top: 24,
  },
  sunPosition: {
    top: 0,
    marginLeft: -16,
    width: 32,
    fontSize: FontSize.med_size,
    height: 16,
  },
  text6Position: {
    marginLeft: -16,
    left: "50%",
    position: "absolute",
    width: 32,
  },
  wedTypo: {
    color: Color.whait,
    fontWeight: "700",
    left: "50%",
    position: "absolute",
    textAlign: "center",
    justifyContent: "center",
    alignItems: "center",
    display: "flex",
    fontFamily: FontFamily.dGBaysan,
  },
  selectDate: {
    fontSize: FontSize.size_sm,
    textTransform: "capitalize",
    fontWeight: "600",
    color: Color.colorBlack,
    textAlign: "left",
    width: 100,
    height: 16,
    display: "flex",
    fontFamily: FontFamily.dGBaysan,
    alignItems: "center",
  },
  january2024: {
    color: Color.a6A6A6,
    width: 79,
    textAlign: "center",
    fontWeight: "300",
    fontSize: FontSize.med_size,
    justifyContent: "center",
    height: 16,
    alignItems: "center",
    display: "flex",
    fontFamily: FontFamily.dGBaysan,
  },
  arrowCircleRightIcon: {
    marginLeft: 10,
  },
  arrowCircleLeftParent: {
    marginLeft: 181,
    flexDirection: "row",
  },
  january2024Parent: {
    flexDirection: "row",
  },
  text: {
    width: 24,
    marginLeft: -12,
    height: 24,
    top: 24,
    color: Color.colorDarkgray_100,
    textAlign: "center",
    fontWeight: "300",
    justifyContent: "center",
    alignItems: "center",
    display: "flex",
    fontFamily: FontFamily.dGBaysan,
    fontSize: FontSize.size_lg,
    left: "50%",
    position: "absolute",
  },
  sun: {
    color: Color.colorDarkgray_100,
    textAlign: "center",
    fontWeight: "300",
    justifyContent: "center",
    alignItems: "center",
    display: "flex",
    fontFamily: FontFamily.dGBaysan,
    left: "50%",
    position: "absolute",
  },
  parent: {
    height: 48,
  },
  group: {
    marginLeft: 13,
    height: 48,
  },
  frameChild: {
    borderRadius: Border.br_6xl,
    backgroundColor: Color.praimary,
    width: 40,
    height: 72,
    zIndex: 0,
  },
  text3: {
    fontSize: FontSize.size_5xl,
    height: 24,
    top: 24,
    width: 24,
    marginLeft: -12,
  },
  wed: {
    top: 0,
    marginLeft: -16,
    width: 32,
    fontSize: FontSize.med_size,
    height: 16,
  },
  groupView: {
    top: 12,
    zIndex: 1,
    height: 48,
  },
  rectangleParent: {
    marginLeft: 13,
    flexDirection: "row",
  },
  text6: {
    height: 24,
    top: 24,
    color: Color.colorDarkgray_100,
    textAlign: "center",
    fontWeight: "300",
    justifyContent: "center",
    alignItems: "center",
    display: "flex",
    fontFamily: FontFamily.dGBaysan,
    fontSize: FontSize.size_lg,
    marginLeft: -16,
  },
  groupParent: {
    marginTop: 8,
    flexDirection: "row",
  },
  frameWrapper: {
    borderRadius: Border.br_5xs,
    backgroundColor: Color.whait,
    shadowColor: "rgba(0, 0, 0, 0.03)",
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowRadius: 20,
    elevation: 20,
    shadowOpacity: 1,
    borderStyle: "solid",
    borderColor: Color.a6A6A6,
    borderWidth: 0.5,
    overflow: "hidden",
    paddingHorizontal: Padding.p_base_5,
    paddingVertical: Padding.p_xs,
    marginTop: 16,
  },
});

export default SectionForm;

//pin your loc end-------------------
// google place autocomplete and update marker code 27-3-24--------
import React, { useState, useRef } from 'react';
import { View, StyleSheet } from 'react-native';
import MapView, { Marker } from 'react-native-maps';
import { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';

const App = () => {
  const [selectedLocation, setSelectedLocation] = useState(null);
  const mapRef = useRef(null);

  const handlePlaceSelected = (data, details = null) => {
    console.log("Selected Place Data:", data);
    console.log("Selected Place Details:", details);

    // Check if details is not null
    if (details) {
      // Attempt to access the coordinates from the details object
      const coordinates = details.geometry?.location;
      console.log("Coordinates:", coordinates);

      // If coordinates are available, set the selectedLocation state
      if (coordinates) {
        setSelectedLocation({
          latitude: coordinates.lat,
          longitude: coordinates.lng,
        });

        // Move map to selected location
        mapRef.current.animateToRegion({
          latitude: coordinates.lat,
          longitude: coordinates.lng,
          latitudeDelta: 0.0922,
          longitudeDelta: 0.0421,
        });
        
        // Log the coordinates
        console.log("Selected Location Coordinates:", coordinates);
      }
    }
  };

  return (
    <View style={styles.container}>
      <GooglePlacesAutocomplete
        fetchDetails={true}
        placeholder="Search"
        onPress={(data, details = null) => handlePlaceSelected(data, details)}
        query={{
          key: 'AIzaSyA3hJP57yrcwv-PVsbrG4gHUGrLu-HmsXs',
          language: 'en',
          fields: 'formatted_address,geometry', // Include 'geometry' to fetch coordinates
        }}
        styles={{
          textInput: styles.input,
        }}
      />
      <MapView
        ref={mapRef}
        style={styles.map}
        initialRegion={{
          latitude: 37.78825,
          longitude: -122.4324,
          latitudeDelta: 0.0922,
          longitudeDelta: 0.0421,
        }}
        onPress={(event) => {
          const { latitude, longitude } = event.nativeEvent.coordinate;
          setSelectedLocation({ latitude, longitude });
          console.log("Selected Location Coordinates:", { latitude, longitude });
        }}
      >
        {selectedLocation && (
          <Marker coordinate={selectedLocation} />
        )}
      </MapView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  input: {
    height: 40,
    borderWidth: 1,
    marginHorizontal: 20,
    marginVertical: 10,
    paddingHorizontal: 10,
  },
  map: {
    flex: 1,
  },
});

export default App;

//end---------------------------------------------------------------------
//to show the current location on map 27-3-24----
import React, { useState, useEffect } from 'react';
import { View, StyleSheet } from 'react-native';
import MapView, { Marker } from 'react-native-maps';
import GetLocation from 'react-native-get-location';

const App = () => {
  const [currentLocation, setCurrentLocation] = useState(null);

  useEffect(() => {
    const fetchLocation = async () => {
      try {
        const location = await GetLocation.getCurrentPosition({
          enableHighAccuracy: true,
          timeout: 60000,
        });
        console.log('Current location:', location);
        setCurrentLocation({
          latitude: location.latitude,
          longitude: location.longitude,
        });
      } catch (error) {
        console.warn('Error getting current location:', error);
      }
    };

    fetchLocation();
  }, []);

  return (
    <View style={styles.container}>
      {currentLocation ? (
        <MapView
          style={styles.map}
          initialRegion={{
            latitude: currentLocation.latitude,
            longitude: currentLocation.longitude,
            latitudeDelta: 0.0922,
            longitudeDelta: 0.0421,
          }}
        >
          <Marker coordinate={currentLocation} title="Your Location" />
        </MapView>
      ) : (
        <View style={styles.mapPlaceholder} />
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  map: {
    flex: 1,
  },
  mapPlaceholder: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f2f2f2',
  },
});

export default App;

//end map--------------------------------------------
//select from map---2-4-24---
import React, { useState, useRef } from 'react';
import { Image, StyleSheet, View, Pressable, Text, ScrollView, Dimensions, KeyboardAvoidingView, Platform, Touchable, TouchableOpacity, InputAccessoryView } from "react-native";
import { useNavigation } from "@react-navigation/native";
import WebViewBottom from "../components/WebViewBottom";
import Property1Default from "../components/Property1Default";
import SearchSection from "../components/SearchSection";
import LocationPickerForm from "../components/LocationPickerForm";
import { Color, Border, FontSize, FontFamily, Padding } from "../GlobalStyles";
import MapView, { Marker } from 'react-native-maps';
import { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';

const SelectFromMap = ({ route }) => {
  const { parentItem, childItem, selectedDate, currentLocation, currentAddress, showMap, selectedTime } = route.params;
  const navigation = useNavigation();
  
  const windowHeight = Dimensions.get('window').height;
  const windowWidth = Dimensions.get('window').width;

  const [selectedLocation, setSelectedLocation] = useState(null);
  const [currentAddress2, setCurrentAddress2] = useState(null);
  const mapRef = useRef(null);
  

  const handlePlaceSelected = (data, details = null) => {
    console.log("Selected Place Data:", data);
    console.log("Selected Place Details:", details);

    if (details) {
      const coordinates = details.geometry?.location;
      console.log("Coordinates:", coordinates);

      if (coordinates) {
        setSelectedLocation({
          latitude: coordinates.lat,
          longitude: coordinates.lng,
        });

        mapRef.current.animateToRegion({
          latitude: coordinates.lat,
          longitude: coordinates.lng,
          latitudeDelta: 0.0922,
          longitudeDelta: 0.0421,
        });

        console.log("Selected Location Coordinates:", coordinates);
        fetchAddress(coordinates); // Call fetchAddress to get the address
      }
    }
  };

  const handleZoomIn = () => {
    if (!selectedLocation) return;

    const zoomLevel = 0.005;
    const newRegion = {
      latitude: selectedLocation.latitude - zoomLevel,
      longitude: selectedLocation.longitude - zoomLevel * 2,
      latitudeDelta: 0.0922,
      longitudeDelta: 0.0421,
    };
    
    mapRef.current.animateToRegion(newRegion, 1000);
  };

  const handleZoomOut = () => {
    if (!selectedLocation) return;

    const zoomLevel = 0.005;
    const newRegion = {
      latitude: selectedLocation.latitude + zoomLevel,
      longitude: selectedLocation.longitude + zoomLevel * 2,
      latitudeDelta: 0.0922,
      longitudeDelta: 0.0421,
    };
    mapRef.current.animateToRegion(newRegion, 1000);
  };

  const fetchAddress = async (selectedLocation) => {
    try {
      const response = await fetch(
        `https://maps.googleapis.com/maps/api/geocode/json?latlng=${selectedLocation.latitude},${selectedLocation.longitude}&key=AIzaSyA3hJP57yrcwv-PVsbrG4gHUGrLu-HmsXs`
      );
      const data = await response.json();
      if (data.results.length > 0) {
        setCurrentAddress2(data.results[0].formatted_address); // Set the current address state
      } else {
        setCurrentAddress2("Address not found");
      }
    } catch (error) {
      console.error('Error fetching address:', error);
      setCurrentAddress2("Error fetching address");
    }
  };

  return (
<ScrollView
   horizontal={true}
   nestedScrollEnabled={true}
   keyboardShouldPersistTaps='handled'
   contentContainerStyle={{ flexGrow: 1 }}
>
    <KeyboardAvoidingView enabled={false}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      style={[styles.pinYourLocation, styles.iconLayout, { height: windowHeight, width: windowWidth }]}
    >
    
      {/* <Image
        style={styles.basemapImageIcon}
        resizeMode="cover"
        source={require("../assets/basemap-image1.png")}
      /> */}
      <View style={styles.container}>
      <MapView
        ref={mapRef}
        style={styles.map}
        initialRegion={{
          latitude: currentLocation.latitude,
          longitude: currentLocation.longitude,
          latitudeDelta: 0.0922,
          longitudeDelta: 0.0421,
        }}
        onPress={(event) => {
          const { latitude, longitude } = event.nativeEvent.coordinate;
          setSelectedLocation({ latitude, longitude });
          console.log("Selected Location Coordinates:", { latitude, longitude });
        }}
      >
        {selectedLocation && (
          <Marker coordinate={selectedLocation}  pinColor="#006daa"/>
        )}
      </MapView>
   

          <GooglePlacesAutocomplete
            fetchDetails={true}
            placeholder="Search"
            onPress={(data, details = null) => handlePlaceSelected(data, details)}
            query={{
              key: 'AIzaSyA3hJP57yrcwv-PVsbrG4gHUGrLu-HmsXs',
              language: 'en',
              fields: 'formatted_address,geometry', // Include 'geometry' to fetch coordinates
            }}
            styles={{
              container: styles.inputContainer,
              textInputContainer: styles.textInputContainer,
              textInput: styles.input,
            }}
          />
        

    </View>
    {/* ff */}
      <View style={styles.pinYourLocationChild} />
      <View style={styles.pinYourLocationItem} />
      <View style={styles.arrow21Parent}>
        <Pressable style={styles.arrow21} onPress={() => navigation.goBack()}>
          <Image
            style={[styles.icon, styles.iconLayout]}
            resizeMode="cover"
            source={require("../assets/arrow-2-11.png")}
          />
        </Pressable>
        <Text style={styles.pinYourLocationContainer}>
          <Text style={styles.p}>p</Text>in your location
        </Text>
      </View>
      <Property1Default
        logIn="Continue"
        property1DefaultPosition="absolute"
        property1DefaultMarginLeft={0}
        property1DefaultTop={"92%"}
        property1DefaultLeft="2%"
        property1DefaultWidth={"95%"}
        property1DefaultHeight={48}
        property1DefaultRight="unset"
        property1DefaultBottom="unset"
        logInLetterSpacing={0.6}
        logInLineHeight={30}
        logInTextTransform="capitalize"
        logInWidth="58.31%"
        logInLeft="20.7%"
        onButtonBigPress={() => navigation.navigate("SelectPayementType", {
  parentItem: parentItem,
  childItem: childItem,
  selectedDate: selectedDate,
  currentLocation: selectedLocation,
  currentAddress: currentAddress2,
  selectedTime:selectedTime
})}
      />
     
      {/* <SearchSection />*/}
      <LocationPickerForm /> 
      <View style={styles.frameParent}>
        <Image
          style={styles.frameIcon}
          resizeMode="cover"
          source={require("../assets/frame151.png")}
        />
        <Text style={styles.setNewLocationContainer}>
          <Text style={styles.setNewLocation}>{`Set new location
`}</Text>
          <Text style={styles.blankLine}> </Text>
        </Text>
      </View>
  
      <TouchableOpacity onPress={handleZoomIn} style={[styles.rectangleParent, styles.rectanglePosition]}>
        <View style={styles.groupShadowBox} />
        <Image
          style={styles.frameIcon1}
          resizeMode="cover"
          source={require("../assets/frame16.png")}
        />
      </TouchableOpacity>
    
      <View style={[styles.rectangleGroup, styles.rectanglePosition]}>
        <View style={styles.groupShadowBox} />
        <Image
          style={styles.frameIcon1}
          resizeMode="cover"
          source={require("../assets/frame17.png")}
        />
      </View>
     </KeyboardAvoidingView>
 </ScrollView>
  );
};

const styles = StyleSheet.create({
  iconLayout: {
    overflow: "hidden",
  },
  container: {
    flex: 1,
  },
  map: {
    ...StyleSheet.absoluteFillObject,
  },
  textInputContainer: {
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    borderRadius: 5,
    flexDirection: 'row',
    alignItems: 'center',
  },
  listView: {
    position: 'absolute',
    top: 60, // Adjust this value based on your layout
    left: 20,
    right: 20,
    zIndex: 1000, // Adjust this value to ensure the autocomplete list appears above the map
  },
  inputContainer: {
    top: "12%",
    left: "2%",
    width:"95.5%",
    zIndex: 9999
  },
  textInputContainer: {
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    borderRadius: 5,
    flexDirection: 'row',
    alignItems: 'center',
  },
  input: {
    height: 40,
    borderWidth: 0,
    marginLeft: 10,
    marginRight: 10,
    paddingHorizontal: 10,
  },
  rectanglePosition: {
    left: 335,
    height: 24,
    width: 24,
    position: "absolute",
  },
  basemapImageIcon: {
    top: 20,
    height: 792,
    width: 375,
    left: "50%",
    marginLeft: -187.5,
    position: "absolute",
  },
  pinYourLocationChild: {
    bottom:0,
    height: 64,
    backgroundColor: Color.whait,
    left: 0,
    width:"100%",
    position: "absolute",
    borderTopRightRadius: Border.br_3xs,
    borderTopLeftRadius: Border.br_3xs,
  },
  pinYourLocationItem: {
    borderBottomRightRadius: Border.br_3xs,
    borderBottomLeftRadius: Border.br_3xs,
    shadowColor: "rgba(0, 0, 0, 0.03)",
    shadowRadius: 20,
    elevation: 20,
    height: 76,
    shadowOpacity: 1,
    shadowOffset: {
      width: 0,
      height: 4,
    },
    top: 0,
    backgroundColor: Color.whait,
    width: "100%",
    left: "0%",
    position: "absolute",
  },
  icon: {
    height: "100%",
    overflow: "hidden",
  },
  arrow21: {
    height: 24,
    width: 24,
  },
  p: {
    textTransform: "capitalize",
  },
  pinYourLocationContainer: {
    fontSize: FontSize.size_base,
    lineHeight: 30,
    fontWeight: "700",
    color: Color.praimary,
    textAlign: "center",
    marginLeft: "30%",
    fontFamily: FontFamily.dGBaysan,
  },
  arrow21Parent: {
    top:"3%",
    left: "4%",
    justifyContent: "center",
    alignItems: "center",
    flexDirection: "row",
    position: "absolute",
  },
  pinYourLocationInner: {
    top: 411,
    left: 115,
    width: 50,
    height: 50,
    position: "absolute",
  },
  frameIcon: {
    width: 18,
    height: 18,
    overflow: "hidden",
  },
  setNewLocation: {
    fontSize: FontSize.med_size,
  },
  blankLine: {
    fontSize: FontSize.size_sm,
    textTransform: "capitalize",
  },
  setNewLocationContainer: {
    fontWeight: "300",
    color: Color.grayBlack,
    textAlign: "left",
    width: "100%",
    height: 13,
    marginLeft: 8,
    fontFamily: FontFamily.dGBaysan,
  },
  frameParent: {
    top: "85%",
    left: "60%",
    borderRadius: Border.br_5xs,
    paddingHorizontal: Padding.p_5xs,
    paddingVertical: Padding.p_4xs,
    elevation: 5,
    shadowRadius: 5,
    shadowColor: "rgba(0, 0, 0, 0.1)",
    alignItems: "center",
    flexDirection: "row",
    shadowOpacity: 1,
    shadowOffset: {
      width: 0,
      height: 4,
    },
    backgroundColor: Color.whait,
    position: "absolute",
  },
  groupShadowBox: {
    borderRadius: Border.br_11xs,
    elevation: 5,
    shadowRadius: 5,
    shadowColor: "rgba(0, 0, 0, 0.1)",
    height: 24,
    width: 24,
    shadowOpacity: 1,
    shadowOffset: {
      width: 0,
      height: 4,
    },
    top: 0,
    backgroundColor: Color.whait,
    left: 0,
    position: "absolute",
  },
  frameIcon1: {
    top: 6,
    left: 6,
    width: 12,
    height: 12,
    position: "absolute",
    overflow: "hidden",
  },
  rectangleParent: {
    top: 273,
  },
  rectangleGroup: {
    top: 245,
  },
  pinYourLocation: {
    backgroundColor: Color.colorGray_100,
    flex: 1,
    overflow: "hidden",
  },
});

export default SelectFromMap;

//map end--------------------------
//pin your locatrion 19n  16-4-2024---
import React, {useState, useRef, useEffect} from 'react';
import {
  StyleSheet,
  View,
  Text,
  Image,
  Pressable,
  ScrollView,
  Dimensions,
  TextInput,
  Touchable,
  TouchableOpacity,
  Button
} from 'react-native';
import {useNavigation} from '@react-navigation/native';
import BookingFormContainer from '../components/BookingFormContainer';
import SectionForm from '../components/SectionForm';
import SectionCard1 from '../components/SectionCard1';
import WebViewBottom from '../components/WebViewBottom';
import {Color, FontFamily, Border, FontSize, Padding} from '../GlobalStyles';
import Property1Default from '../components/Property1Default';
import DateTimePicker from '@react-native-community/datetimepicker';
import {Modal} from 'react-native-paper';
import { makeApiRequest } from '../Utils/WebServer';
import {useSelector} from 'react-redux';
import { selectUser } from '../redux/userSlice';


const OutlinedButton = ({title, isSelected, onPress}) => {
  return (
    <TouchableOpacity
      style={[styles.button, isSelected && styles.selectedButton]}
      onPress={onPress}
      disabled={isSelected}>
      <Text
        style={[styles.buttonText, isSelected && styles.selectedButtonText]}>
        {title}
      </Text>
    </TouchableOpacity>
  );
};

const OutlinedButton2 = ({ title, isSelected, onPress }) => {
  return (
    <TouchableOpacity
      style={[styles.buttonM, isSelected&& styles.selectedButton2]}
      onPress={onPress}
    >
      <Text style={[styles.buttonTextM, isSelected && styles.selectedButtonText2]}>
        {title}
      </Text>
    </TouchableOpacity>
  );
};

const PinYourLocation19N = ({route}) => {
  const userData1 = useSelector(selectUser);
  console.log(userData1.token)
  const navigation = useNavigation();
  const windowHeight = Dimensions.get('window').height;
  const windowWidth = Dimensions.get('window').width;
  const {parentItem, childItem, category} = route.params;
  console.log('parent', category);
  console.log('child', childItem.minReqResource);

  const [selectedDate, setSelectedDate] = useState(null);
  const [selectedButtons, setSelectedButtons] = useState([]);
  const [modalVisible, setModalVisible] = useState(false);
  const [selectedButton, setSelectedButton] = useState('a');
  const [price, setPrice] = useState(1);
  useEffect(() => {
    // Update the status of button 1 based on the selectedButtons array
    const isButton1Selected = selectedButtons.includes(1);
    console.log(
      'Button 1 status:',
      isButton1Selected ? 'Selected' : 'Not Selected',
    );
  }, [selectedButtons]);
  const toggleButton = buttonIndex => {
    if (selectedButtons.includes(buttonIndex)) {
      setSelectedButtons(
        selectedButtons.filter(index => index !== buttonIndex),
      );
    } else {
      if (selectedButtons.length === 3) {
        // Deselect the first button if already three buttons are selected
        setSelectedButtons(selectedButtons.slice(1).concat(buttonIndex));
      } else {
        setSelectedButtons([...selectedButtons, buttonIndex]);
      }
    }
  };

  const handleDateSelected = date => {
    setSelectedDate(date);
  };
  console.log(selectedDate, 'from pin1 calender');

  const [selectedTime, setSelectedTime] = useState(new Date());
  const [showTimePicker, setShowTimePicker] = useState(false);

  const onChange = (event, selected) => {
    const currentDate = selected || selectedTime;
    setShowTimePicker(Platform.OS === 'ios');
    setSelectedTime(currentDate);
  };

  const increaseTime = () => {
    const newTime = new Date(selectedTime.getTime() + 60000); // Adding one minute
    setSelectedTime(newTime);
  };

  const decreaseTime = () => {
    const newTime = new Date(selectedTime.getTime() - 60000); // Subtracting one minute
    setSelectedTime(newTime);
  };

  const format12Hour = hours => {
    return hours % 12 || 12;
  };

  const frameParentStyle = category === 'D' ? {top: '26%'} : {top: '40%'};

  console.log(selectedButtons.length);


  const openModal = () => {
    setModalVisible(true);
  };

  const closeModal = () => {
    setModalVisible(false);
  };

  const handleButtonPress = (button) => {
    setSelectedButton(button);
    // You can update the state or perform any other actions here
    console.log("Selected Button:", button);
  };
console.log(category)
  const fetchPrice = async (categoryPass) => {
    console.log(categoryPass,"testing")
    try {
      const url = `https://hvserp.com/FomMobB2C/api/FomCustomerContract/getDefaultPaymentPrices?type=${categoryPass}`;

      const PriceRcvd = await makeApiRequest(url, userData1.token, 'GET');
      console.log(PriceRcvd);
      setPrice(PriceRcvd);
      

    } catch (error) {
      console.error('Error fetching data:', error);
    }
  }
  useEffect(() => {
    const categoryPass = category === 'M' ? 'Month': 'Year';
    console.log(categoryPass)
    // Call fetchPrice when the component mounts
    fetchPrice(categoryPass);
  }, []); 

  return (
    <>
      <ScrollView>
        <View
          style={[
            styles.pinYourLocation,
            {height: windowHeight + 290, width: windowWidth},
          ]}>
          <View
            style={[
              styles.pinYourLocationChild,
              styles.buttonBigParentPosition,
            ]}
          />
          <Text style={[styles.bookingTheService, styles.arrow21Layout]}>
            Booking the service
          </Text>
          <BookingFormContainer />
          <View style={styles.pinYourLocationItem} />
          {/**/}
          {category === 'M' || category === 'Y' ? (
            <View style={styles.rectangleLayout}>
              <View
                style={[styles.rectangleView, styles.rectangleViewShadowBox]}
              />
              <View style={[styles.frameGroup, styles.writeHerePosition]}>
                <View style={styles.receiptEditParent}>
                  <Image
                    style={styles.iconLayout}
                    resizeMode="cover"
                    source={require('../assets/receiptedit1.png')}
                  />
                  <Text style={styles.oneYearSubscription}>
                    One-year subscription
                  </Text>
                </View>
                <View style={styles.frameContainer}>
                  <View style={{left: '-20%'}}>
                    <View style={styles.parentFlexBox}>
                      <Image
                        style={styles.calendarIcon}
                        resizeMode="cover"
                        source={require('../assets/calendar2.png')}
                      />
                      <Text style={[styles.visits, styles.hoursTypo]}>
                        <Text style={styles.text4}>
                          <Text style={styles.textTypo2}>12</Text>
                        </Text>
                        <Text style={styles.visits1}>
                          <Text style={styles.text4}>{` `}</Text>
                          <Text style={styles.visits2}>visits</Text>
                          <Text style={styles.text4}>{` `}</Text>
                        </Text>
                      </Text>
                    </View>
                    <View style={[styles.clockParent, styles.parentFlexBox]}>
                      <Image
                        style={styles.calendarIcon}
                        resizeMode="cover"
                        source={require('../assets/clock2.png')}
                      />
                      <Text style={[styles.hours, styles.hoursTypo]}>
                        <Text
                          style={[styles.text8, styles.textTypo2]}>{`4 `}</Text>
                        <Text style={styles.hours1}>hours</Text>
                      </Text>
                    </View>
                  </View>
                  <View style={{left: '-170%'}}>
                    <View style={styles.userParent}>
                      <Image
                        style={styles.calendarIcon}
                        resizeMode="cover"
                        source={require('../assets/user4.png')}
                      />
                      <Text style={styles.hoursTypo}>
                        <Text style={styles.textTypo2}>1</Text>
                        <Text style={styles.visits1}> domestic worker</Text>
                      </Text>
                    </View>
                    <View style={styles.home2Parent}>
                      <Image
                        style={styles.calendarIcon}
                        resizeMode="cover"
                        source={require('../assets/home27.png')}
                      />
                      <Text style={[styles.oneVisitA, styles.hoursTypo]}>
                        3 visit a week
                      </Text>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          ) : null}

          {/**/}

          <View style={[styles.frameParent, frameParentStyle]}>
            <SectionForm onDateSelected={handleDateSelected} />
            {/* */}

            {/* <View style={styles.containerN}>
     ess={() => toggleButton(6)}
      />
    </View> */}

            {/* */}
            {category === 'M' || category === 'Y' ? (
              <>
                <View style={styles.receiptEditParentN}>
                  <Image
                    style={styles.iconLayout}
                    resizeMode="cover"
                    source={require('../assets/calendartick7.png')}
                  />
                  <View style={{flexWrap: 'wrap'}}>
                    <Text style={styles.oneYearSubscriptionN}>
                      The contract begins on{' '}
                      <Text style={{color: Color.praimary}}>
                        january 17,2024
                      </Text>{' '}
                      and ends on{' '}
                      <Text style={{color: Color.praimary}}>
                        january 18,2025
                      </Text>
                    </Text>
                  </View>
                </View>
                <View style={styles.receiptEditParentN}>
                  <Text
                    style={{
                      marginLeft: '0%',
                      color: Color.black,
                      fontWeight: '500',
                    }}>
                    Choose visit Days
                    <Text style={{color: Color.praimary}}> (Max 3/week)</Text>
                  </Text>
                </View>

                <View style={styles.containerN}>
                  <OutlinedButton
                    title="Saturday"
                    isSelected={selectedButtons.includes(1)}
                    onPress={() => {
    toggleButton(1);
    openModal(); // Call the openModal function
  }}
                  />
                  <OutlinedButton
                    title="Sunday"
                    isSelected={selectedButtons.includes(2)}
                    onPress={() => {
    toggleButton(2);
    openModal(); // Call the openModal function
  }}
                  />
                  <OutlinedButton
                    title="Monday"
                    isSelected={selectedButtons.includes(3)}
                    onPress={() => {
    toggleButton(3);
    openModal(); // Call the openModal function
  }}
                  />
                  <OutlinedButton
                    title="Tuesday"
                    isSelected={selectedButtons.includes(4)}
                    onPress={() => {
    toggleButton(4);
    openModal(); // Call the openModal function
  }}
                  />
                  <OutlinedButton
                    title="Wednesday"
                    isSelected={selectedButtons.includes(5)}
                    onPress={() => {
    toggleButton(5);
    openModal(); // Call the openModal function
  }}
                  />
                  <OutlinedButton
                    title="Thursday"
                    isSelected={selectedButtons.includes(6)}
                    onPress={() => {
    toggleButton(6);
    openModal(); // Call the openModal function
  }}
                  />
                </View>
              </>
            ) : (
              <View>
                <SectionCard1 childItem={childItem} />
                <View style={[styles.rectangleParent, styles.groupChildLayout]}>
                  <View style={[styles.groupChild, styles.groupShadowBox]} />
                  <View style={[styles.startTimeParent, styles.parentFlexBox]}>
                    <Text style={styles.startTime}>start time</Text>
                    <View
                      style={[styles.addCircleParent, styles.parentFlexBox]}>
                      <TouchableOpacity onPress={increaseTime}>
                        <Image
                          style={styles.iconLayout}
                          resizeMode="cover"
                          source={require('../assets/addcircle.png')}
                        />
                      </TouchableOpacity>
                      <Text style={[styles.am, styles.amTypo]}>{`${format12Hour(
                        selectedTime.getHours(),
                      )}:${selectedTime
                        .getMinutes()
                        .toString()
                        .padStart(2, '0')} ${
                        selectedTime.getHours() >= 12 ? 'PM' : 'AM'
                      }`}</Text>
                      <TouchableOpacity onPress={decreaseTime}>
                        <Image
                          style={[styles.minusCirlceIcon, styles.iconLayout]}
                          resizeMode="cover"
                          source={require('../assets/minuscirlce1.png')}
                        />
                      </TouchableOpacity>
                    </View>
                  </View>
                </View>
              </View>
            )}

            <View style={styles.writeCommentsOrPreferencesParent}>
              <Text style={[styles.writeCommentsOr, styles.writeFlexBox]}>
                Write comments or preferences
              </Text>
              <View style={[styles.rectangleGroup, styles.groupLayout]}>
                <TextInput
                  placeholder="write here....."
                  placeholderTextColor="#D3D3D3"
                  multiline
                  numberOfLines={4}
                  style={{
                    color: 'black',
                    padding: 10,
                    marginTop: '2%',
                    backgroundColor: 'white',
                    borderBottomWidth: 0,
                    width: '95%',
                    textAlignVertical: 'top', // Start from top
                  }}
                  underlineColorAndroid="transparent" // Remove underline on Android
                />
              </View>
            </View>
          </View>
          <View style={[styles.groupChild2, styles.groupShadowBox2]} />
          <Pressable
            style={[styles.arrow21, styles.arrow21Layout]}
            onPress={() => navigation.goBack()}>
            <Image
              style={styles.icon}
              resizeMode="cover"
              source={require('../assets/arrow-2-13.png')}
            />
          </Pressable>
          <Image
            style={styles.icon1}
            resizeMode="cover"
            source={require('../assets/3-1-1.png')}
          />

          
        </View>
       
      </ScrollView>
      {modalVisible && <View style={styles.modalOverlay} />}
      {modalVisible && (
  <View style={[styles.containerM, { zIndex: 12 ,borderTopLeftRadius:15,backgroundColor:"white",borderTopRightRadius:18,width:"100%",  shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 5,
    },
    shadowOpacity: 1.95,
    shadowRadius: 3.84,

    elevation: 5,}]}>
    <View style={[styles.modalContainerM, { zIndex: 1, height: "30%" }]}>
      <View style={styles.modalContentM}>
        <View style={{ flexDirection: "row", padding: 13 }}>
          <Text style={{color:Color.praimary}}>Wednesday, 17 january2024 </Text>
          <Pressable  onPress={closeModal}>
          <Image
            style={{ height: 18, width: 18 ,left:"680%"}}
            resizeMode="cover"
            source={require("../assets/receiptedit1.png")}
          />
          </Pressable>
        </View>
        <Text style={{ padding:10,paddingTop:-20 }}>Choose your visit time</Text>
        <View style={[styles.buttonContainerM, { flexDirection: "row" }]}>
          <OutlinedButton2
            title="04:00 AM To 11:00 PM"
            isSelected={selectedButton === "a"}
            onPress={() => handleButtonPress("a")}
          />
          <OutlinedButton2
            title="08:00 AM To 04:00 PM"
            isSelected={selectedButton === "b"}
            onPress={() => handleButtonPress("b")}
          />
        </View>
        
        <Property1Default
      logIn="Confirmation"
      property1DefaultPosition="relative"
      property1DefaultMarginLeft="unset"
      property1DefaultTop="11%"
      property1DefaultLeft="8%"
      property1DefaultWidth={"80%"}
      property1DefaultHeight={48}
      property1DefaultRight="unset"
      property1DefaultBottom="unset"
      logInLetterSpacing={0.6}
      logInLineHeight={28}
      logInTextTransform="capitalize"
      logInWidth="58.33%"
      logInLeft="20.72%"
      onButtonBigPress={closeModal}
    />
      </View>
    </View>
  </View>
)}

     
{!modalVisible && (
  <View style={[styles.buttonBigParent, styles.parentFlexBox]}>
    <Property1Default
      logIn="Continue"
      property1DefaultPosition="relative"
      property1DefaultMarginLeft="unset"
      property1DefaultTop="unset"
      property1DefaultLeft="unset"
      property1DefaultWidth={251}
      property1DefaultHeight={48}
      property1DefaultRight="unset"
      property1DefaultBottom="unset"
      logInLetterSpacing={0.6}
      logInLineHeight={28}
      logInTextTransform="capitalize"
      logInWidth="58.33%"
      logInLeft="20.72%"
      onButtonBigPress={() =>
        navigation.navigate('YourAddressLocation111N', {
          parentItem,
          childItem,
          selectedDate,
          selectedTime: `${format12Hour(
            selectedTime.getHours(),
          )}:${selectedTime.getMinutes().toString().padStart(2, '0')} ${
            selectedTime.getHours() >= 12 ? 'PM' : 'AM'
          }`,
        })
      }
    />
    <View style={styles.sarParent}>
      <Text style={styles.sar}>{childItem.offerPrice} SAR</Text>
      <Text style={[styles.notIncludingVat, styles.writeHereTypo]}>
        not including vat
      </Text>
    </View>
  </View>
)}

      
    
      
      

    </>
  );
};

const styles = StyleSheet.create({
  
  modalOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)', // Semi-transparent black color
    zIndex: 11, // Make sure it's below the modal content
  },
  buttonM: {
    borderWidth: 1,
    borderColor: '#a6a6a6',
    borderRadius: 8,
    paddingVertical: 10,
    width: '46%',
    margin: 5,
    padding:3
  },

  containerN: {
    flex: 0,
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 5,
    backgroundColor: 'white',
    width: '100%',
    left: '-1%',
  },

  button: {
    borderWidth: 1,
    borderColor: '#a6a6a6',
    borderRadius: 8,
    paddingVertical: 10,
    width: '30%',
    margin: 5,
  },
  selectedButton: {
    backgroundColor: Color.praimary,
    borderColor: 'green',
  },
  buttonText: {
    fontSize: 16,
    color: '#a6a6a6',
    textAlign: 'center',
  },
  buttonTextM: {
    fontSize: 14,
    color: '#a6a6a6',
    textAlign: 'center',
  },
  selectedButtonText: {
    color: 'white',
  },
  rectangleLayout: {
    height: 124,
    width: '100%',
    top: '25%',
  },
  rectangleView: {
    borderWidth: 0.3,
    height: 124,
    width: '95.5%',
    left: '2%',
    top: 0,
    borderColor: Color.gray,
    borderRadius: Border.br_5xs,
    position: 'absolute',
  },
  rectangleViewShadowBox: {
    borderRadius: Border.br_5xs,
    borderStyle: 'solid',
    shadowOpacity: 1,
    elevation: 20,
    shadowRadius: 20,
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowColor: 'rgba(0, 0, 0, 0.03)',
    backgroundColor: Color.whait,
  },
  frameGroup: {
    height: 92,
    justifyContent: 'space-between',
    top: '4%',
    left: '13%',
    alignItems: 'center',
  },
  writeHerePosition: {
    top: '14%',
    position: 'absolute',
  },
  receiptEditParent: {
    flexDirection: 'row',
    alignItems: 'center',
    left: '60%',
  },
  receiptEditParentN: {
    marginTop: '3%',
    flexDirection: 'row',
    alignItems: 'center',
    overflow: 'hidden',
  },
  oneYearSubscription: {
    width: '100%',
    marginLeft: 8,
    textAlign: 'left',
    textTransform: 'capitalize',
    fontSize: FontSize.size_sm,
    height: 16,
    color: Color.black,
    fontFamily: FontFamily.dGBaysan,
  },
  oneYearSubscriptionN: {
    marginLeft: 8,
    textAlign: 'left',
    textTransform: 'capitalize',
    fontSize: FontSize.size_sm,
    color: Color.colorDarkgray_100,
    fontFamily: FontFamily.dGBaysan,
    flexWrap: 'wrap',
    maxWidth: '94%',
  },
  frameContainer: {
    width: '94%',
    justifyContent: 'space-between',
    flexDirection: 'row',
  },
  parentFlexBox: {
    width: '100%',
    flexDirection: 'row',
    alignItems: 'center',
  },
  visits: {
    width: 47,
    height: 16,
  },
  hoursTypo: {
    lineHeight: 16,
    fontSize: FontSize.med_size,
    marginLeft: 8,
    textAlign: 'left',
    color: Color.grayBlack,
  },
  visits1: {
    fontWeight: '300',
    fontFamily: FontFamily.dGBaysan,
  },
  clockParent: {
    marginTop: 24,
  },
  parentFlexBox: {
    width: 67,
    flexDirection: 'row',
    alignItems: 'center',
  },
  hours: {
    width: 41,
    height: 16,
  },
  userParent: {
    width: 123,
    flexDirection: 'row',
    alignItems: 'center',
  },
  calendarIcon: {
    width: 16,
    height: 16,
  },
  hoursTypo: {
    lineHeight: 16,
    fontSize: FontSize.med_size,
    marginLeft: 8,
    textAlign: 'left',
    color: Color.grayBlack,
  },
  textTypo2: {
    fontFamily: FontFamily.med,
    fontWeight: '500',
  },
  visits1: {
    fontWeight: '300',
    fontFamily: FontFamily.dGBaysan,
  },
  home2Parent: {
    width: 110,
    marginTop: 24,
    flexDirection: 'row',
    alignItems: 'center',
  },
  oneVisitA: {
    width: 95,
    textTransform: 'lowercase',
    fontWeight: '300',
    height: 16,
    fontFamily: FontFamily.dGBaysan,
  },
  buttonBigParentPosition: {
    width: '100%',
    backgroundColor: Color.lightBGPrimary,
    left: '0%',
    position: 'absolute',
  },
  groupChild2: {
    borderBottomRightRadius: Border.br_3xs,
    borderBottomLeftRadius: Border.br_3xs,
    height: 99,
    elevation: 20,
    shadowRadius: 20,
    shadowColor: 'rgba(0, 0, 0, 0.2)',
    backgroundColor: Color.whait,
    shadowOpacity: 1,
    shadowOffset: {
      width: 0,
      height: 4,
    },
    width: '100%',
    left: '0%',
    position: 'absolute',
  },
  groupShadowBox2: {
    shadowOpacity: 1,
    shadowOffset: {
      width: 0,
      height: 4,
    },
    top: '-2%',
  },
  arrow21Layout: {
    height: 24,
    position: 'absolute',
  },
  groupChildLayout: {
    height: 53,
    width: '98%',
  },
  groupShadowBox: {
    borderWidth: 0.5,
    borderColor: Color.gray,
    borderStyle: 'solid',
    left: 0,
    shadowOpacity: 1,
    elevation: 20,
    shadowRadius: 20,
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowColor: 'rgba(0, 0, 0, 0.03)',
    backgroundColor: Color.lightBGPrimary,
    top: 0,
    position: 'absolute',
  },
  parentFlexBox: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  amTypo: {
    height: 16,
    alignItems: 'center',
    display: 'flex',
    fontFamily: FontFamily.dGBaysan,
    fontWeight: '600',
  },
  iconLayout: {
    height: 20,
    width: 20,
  },
  writeFlexBox: {
    textAlign: 'left',
    color: Color.colorBlack,
  },
  groupLayout: {
    height: 100,
    width: '98%',
    borderColor: '#a6a6a6',
    borderWidth: 0.5,
    borderRadius: 10,
  },
  writeHereTypo: {
    fontWeight: '300',
    fontFamily: FontFamily.dGBaysan,
  },
  pinYourLocationChild: {
    borderBottomRightRadius: Border.br_3xs,
    borderBottomLeftRadius: Border.br_3xs,
    height: 86,
    shadowOpacity: 1,
    elevation: 20,
    shadowRadius: 20,
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowColor: 'rgba(0, 0, 0, 0.03)',
    top: 0,
    width: 375,
    backgroundColor: Color.lightBGPrimary,
    marginLeft: 187.5,
  },
  bookingTheService: {
    top: '11%',
    lineHeight: 24,
    width: 155,
    justifyContent: 'center',
    alignItems: 'center',
    display: 'flex',
    textAlign: 'center',
    color: Color.black,
    fontFamily: FontFamily.dGBaysan,
    fontWeight: '600',
    fontSize: FontSize.size_base,
    height: 24,
    left: '30%',
  },
  pinYourLocationItem: {
    top: '50%',
    width: '100%',
    height: 38,
    overflow: 'hidden',
    left: '0%',
    position: 'absolute',
  },
  groupChild: {
    borderRadius: Border.br_5xs,
    height: 53,
    width: '100%',
  },
  startTime: {
    color: Color.colorBlack,
    textTransform: 'capitalize',
    fontSize: FontSize.med_size,
    textAlign: 'center',
    fontFamily: FontFamily.dGBaysan,
    fontWeight: '600',
  },
  am: {
    width: 56,
    marginLeft: 8,
    height: 16,
    fontSize: FontSize.med_size,
    justifyContent: 'center',
    textAlign: 'center',
    color: Color.black,
  },
  minusCirlceIcon: {
    marginLeft: 8,
  },
  addCircleParent: {
    marginLeft: '42%',
    justifyContent: 'center',
  },
  startTimeParent: {
    top: 16,
    position: 'absolute',
    left: '4%',
  },
  rectangleParent: {
    marginTop: 24,
  },
  writeCommentsOr: {
    fontSize: FontSize.size_sm,
    width: '100%',
    height: 17,
    alignItems: 'center',
    display: 'flex',
    fontFamily: FontFamily.dGBaysan,
    fontWeight: '600',
    textTransform: 'capitalize',
    textAlign: 'left',
  },
  groupItem: {
    borderRadius: Border.br_3xs,
    borderWidth: 0.5,
    borderColor: Color.gray,
    borderStyle: 'solid',
    left: 0,
    shadowOpacity: 1,
    elevation: 20,
    shadowRadius: 20,
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowColor: 'rgba(0, 0, 0, 0.03)',
    backgroundColor: Color.lightBGPrimary,
    top: 0,
    position: 'absolute',
  },
  writeHere: {
    marginLeft: -155.5,
    fontSize: FontSize.size_3xs,
    opacity: 0.4,
    textAlign: 'left',
    color: Color.colorBlack,
    top: 16,
    position: 'absolute',
    left: '50%',
  },
  rectangleGroup: {
    marginTop: 16,
  },
  writeCommentsOrPreferencesParent: {
    marginTop: 24,
  },
  frameParent: {
    height: '80%',
    left: '3%',
    width: '96%',
    position: 'absolute',
  },
  icon: {
    height: '100%',
    overflow: 'hidden',
    width: '100%',
  },
  arrow21: {
    top: '4%',
    width: 24,
    left: '4%',
  },
  icon1: {
    top: '3%',
    width: 75,
    height: 30,
    left: '42%',
    position: 'absolute',
  },
  sar: {
    fontFamily: FontFamily.poppinsSemiBold,
    color: Color.red,
    textAlign: 'center',
    fontWeight: '600',
    fontSize: FontSize.size_base,
  },
  notIncludingVat: {
    fontSize: FontSize.size_4xs,
    color: 'gray',
    width: 66,
    justifyContent: 'center',
    alignItems: 'center',
    display: 'flex',
    textAlign: 'center',
  },
  sarParent: {
    alignItems: 'center',
  },
  buttonBigParent: {
    bottom: -3,
    justifyContent: 'space-between',
    paddingHorizontal: Padding.p_base,
    paddingVertical: Padding.p_5xs,
    width: '100%',
    backgroundColor: 'white',
    left: '0%',
    position: 'absolute',
    flexDirection: 'row',
  },
  pinYourLocation: {
    backgroundColor: Color.colorGray_100,
    flex: 1,
  },
});

export default PinYourLocation19N;

//pin your locatioin end --